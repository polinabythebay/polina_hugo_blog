<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Julia Evans]]></title>
  <link href="http://jvns.ca/atom.xml" rel="self"/>
  <link href="https://jvns.ca/categories/strace/atom/index.xml"/>
  <updated>0001-01-01T00:00:00+00:00</updated>
  <id>http://jvns.ca</id>
  <author>
    <name><![CDATA[Julia Evans]]></name>
  </author>
  <generator uri="http://gohugo.io/">Hugo</generator>

  
  <entry>
    <title type="html"><![CDATA[Sendfile (a system call for web developers to know about!)]]></title>
    <link href="https://jvns.ca/blog/2016/01/23/sendfile-a-new-to-me-system-call/"/>
    <updated>2016-01-23T09:17:14+00:00</updated>
    <id>https://jvns.ca/blog/2016/01/23/sendfile-a-new-to-me-system-call/</id>
    <content type="html"><![CDATA[

<p>The other day I learned about a new (to me) exciting Linux system call! (for newcomers, a system call is an operation you can ask the operating system to do). This one seems really important to know about if you&rsquo;re configuring a webserver! So let&rsquo;s learn about it.</p>

<p>Before this, I knew about basic system calls like <code>open</code> and <code>read</code> for files, and <code>sendto</code> and <code>recvfrom</code> for networking. And a few fancier things like <code>futex</code> and <code>select</code> for mutexes and waiting.</p>

<h3 id="why-sendfile-was-invented">why sendfile was invented</h3>

<p>Suppose I want to send you a big file over a network connection. Normally I&rsquo;d just read the file incrementally, and then write the contents to the socket. So, at a minimum, we need to</p>

<ul>
<li>use <code>read</code> (requires a context switch into kernel code)</li>
<li>(implicitly, copy the data from kernel memory into user memory)</li>
<li>use <code>sendto</code> or <code>write</code> (another context switch)</li>
</ul>

<p>This means we need to copy data (bad) and use two system calls instead of one (also bad).</p>

<p>So the idea is &ndash; this pattern of reading a file and writing to a socket is really common! So they made a system call to just do that! Then the kernel can do all the work of reading and writing, and save you CPU time. And you don&rsquo;t need to copy any data around! AMAZING.</p>

<h3 id="the-performance-implications">the performance implications</h3>

<p>I found this <a href="https://code.google.com/p/pyftpdlib/issues/detail?id=152">google code discussion on a Python FTP library</a>. One person says that by using the <code>sendfile</code> system call, they could transfer 1.5GB/s instead of 800MB/s! That&rsquo;s pretty awesome for a small change.</p>

<p><a href="https://people.freebsd.org/~rrs/asiabsd_2015_tls.pdf">This paper from Netflix</a> describes using sendfile on FreeBSD to go from 6Gbps to 40Gbps of network throughput. They also talk about implementing (part of?) TLS in the kernel to improve TLS performance.</p>

<h3 id="the-disasters">the disasters</h3>

<p>I then read <a href="https://blog.phusion.nl/2015/06/04/the-brokenness-of-the-sendfile-system-call/">&ldquo;The brokenness of the sendfile() system call&rdquo;</a>. Wait?! But I thought sendfile was awesome and we should always use it? Not so!</p>

<p>That post describes how on OS X, <code>sendfile</code> wouldn&rsquo;t send <strong>any</strong> data until the socket was closed, causing up to 5 second delays. That&rsquo;s TERRIBLE. So sendfile isn&rsquo;t some kind of universal panacea, and that&rsquo;s why webservers let you turn it on and off.</p>

<h3 id="some-other-reading-on-sendfile">some other reading on sendfile</h3>

<p><a href="https://groups.google.com/forum/#!msg/golang-nuts/gdp1q6T0DNY/sFaRetnWPWIJ">Rob Pike (one of the creators of Go) thinks sendfile is &ldquo;bizarre&rdquo;</a>. I find his argument in that post pretty difficult to follow (if the kernel provides a way to do something, and that way gives you better performance in practice, why not use it?). But I thought it was interesting.</p>

<p><a href="http://tia.mat.br/posts/2014/10/06/life_of_a_http_request.html">Life of a HTTP request, as seen by my toy web server</a> is interesting, and describes how the author uses <code>sendfile</code> for large files, but not for small files. You don&rsquo;t need to write your own webserver to take advantage of this &ndash; you can configure apache and nginx to use sendfile!</p>

<p><a href="http://man7.org/linux/man-pages/man2/sendfile.2.html">The sendfile man page</a> is actually quite readable, and it tells you something very important! It recommends using the <code>TCP_CORK</code> TCP option for better network performance. We learned about how understanding TCP is important in <a href="http://jvns.ca/blog/2015/11/21/why-you-should-understand-a-little-about-tcp/">Why you should understand (a little) about TCP</a>, and that&rsquo;s pretty important here as well. In this case you need to decide whether to use <code>TCP_CORK</code> and <code>TCP_NODELAY</code>. One thing I read recommended using both.</p>

<p>You can also use sendfile to copy files quickly! (like, think about how <code>cp</code> is implemented!) <a href="http://blog.plenz.com/2014-04/so-you-want-to-write-to-a-file-real-fast.html">So you want to write to a file real fast&hellip;</a> walks through some optimizations to file copying and gets a 25% improvement by using <code>sendfile</code> and other tricks. I straced <code>cp</code> on my machine just now, and it seems like it does not use <code>sendfile</code>. It&rsquo;s super interesting to me how much abstractions break down when you&rsquo;re trying to really optimize performance.</p>

<h3 id="next-step-splice-tee">next step: <code>splice</code> &amp; <code>tee</code></h3>

<p>These days <code>sendfile</code> is a wrapper around the <code>splice</code> system call, which seems to be the same thing &ndash; copy data from one file/pipe/socket to another &ndash; but with some extra options.</p>

<p>There&rsquo;s <a href="https://web.archive.org/web/20130521163124/http://kerneltrap.org/node/6505">a neat thread on the Linux Kernel Mailing List from 2006</a>, just after those system calls came into existence, where Linus explains what they&rsquo;re for and how to think about them.</p>

<p>I found this paragraph helpful:</p>

<blockquote>
<p>Anyway, when would you actually <em>use</em> a kernel buffer? Normally you&rsquo;d use it
it you want to copy things from one source into another, and you don&rsquo;t
actually want to see the data you are copying, so using a kernel buffer allows
you to possibly do it more efficiently, and you can avoid allocating user VM
space for it</p>
</blockquote>

<p>That post also makes it clear that <code>sendfile</code> used to be a separate system call and is now just a wrapper around <code>splice</code>.</p>

<p>There&rsquo;s also <code>vmsplice</code>, which I think is related and important. But right now my brain is full. Maybe we&rsquo;ll learn about vmsplice later.</p>

<h3 id="why-this-is-amazing">why this is amazing</h3>

<p>It makes me really happy when learning a new system call helps me understand how to do something really practical. Now I know that if I&rsquo;m building something that serves large files and I care about the performance, I should make sure I understand if it&rsquo;s using sendfile!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A zine about strace]]></title>
    <link href="https://jvns.ca/blog/2015/04/14/strace-zine/"/>
    <updated>2015-04-14T22:52:23+00:00</updated>
    <id>https://jvns.ca/blog/2015/04/14/strace-zine/</id>
    <content type="html"><![CDATA[<p><strong>UPDATE</strong>: this zine and more can now be found at <a href="https://jvns.ca/zines">jvns.ca/zines</a></p>

<p>As some of you might have heard, I wrote a zine to teach people about
how to debug their programs using strace a while ago! I was originally
going to mail it out to people, but it turns out I&rsquo;m too lazy to mail
anything.</p>

<p>So instead, you can download, print, fold, and staple it yourself today!
It should work if you print it double-sided with short edge binding on
letter paper. Also if you print an initial master copy, you can take it
to a copy shop and get them to make many copies for you.</p>

<p>Give it to your friends/colleagues/students to teach them about strace!
Send me pictures! <a href="https://twitter.com/b0rk">Tell me</a> what you think! &lt;3</p>

<p><a href="http://jvns.ca/strace-zine-portrait.pdf">Here&rsquo;s the pdf. Have fun.</a> (there&rsquo;s also a <a href="http://jvns.ca/strace-zine-landscape.pdf">landscape version</a>)</p>

<p>You can also <a href="http://jvns.ca/strace-zine-unfolded.pdf">read it on your computer</a>. But printing it is better! =D</p>

<div align="center">
<a href="http://jvns.ca/strace-zine-portrait.pdf">
<img src="/images/strace_zine.png">
</a>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A few spy tools for your operating system (other than strace!)]]></title>
    <link href="https://jvns.ca/blog/2015/04/06/a-few-spy-tools-for-your-operating-system-other-than-strace/"/>
    <updated>2015-04-06T22:30:02+00:00</updated>
    <id>https://jvns.ca/blog/2015/04/06/a-few-spy-tools-for-your-operating-system-other-than-strace/</id>
    <content type="html"><![CDATA[<p>There are <em>so many</em> awesome tools you can use to find out what&rsquo;s going on with
your computer. Here are some that exist on Linux. They might exist on your OS
too!</p>

<h3 id="netstat">netstat</h3>

<p>netstat tells you what ports are open on your computer. This is crazy useful if
you want to know if the service that is <em>supposed</em> to be listening on port 8080
is <em>actually</em> listening on port 8080.</p>

<pre><code>sudo netstat -tulpn
[sudo] password for bork: 
Active Internet connections (only servers)
Proto Recv-Q Send-Q Local Address       Foreign Address     State       PID/Program name
tcp        0      0 127.0.0.1:631       0.0.0.0:*           LISTEN      1658/cupsd      
tcp        0      0 127.0.0.1:5432      0.0.0.0:*           LISTEN      1823/postgres   
tcp        0      0 127.0.0.1:6379      0.0.0.0:*           LISTEN      2516/redis-server
</code></pre>

<p>If you look at the Program Name column on the right, you&rsquo;ll see that
apparently I have cupsd (printing), postgres, and redis servers running
on my machine, as well as some other stuff that I redacted. I actually
have no idea why I had redis installed so uh yeah I uninstalled it.</p>

<p>I use netstat pretty often when I&rsquo;m trying to debug &ldquo;omg why is this
thing not running IT IS SUPPOSED TO BE RUNNING&rdquo;. netstat tells me the
truth about whether it is running.</p>

<p></p>

<h3 id="dstat">dstat</h3>

<p>Want to know how much data is actually being written to your physical hard
drive right this second? YEAH YOU DO. dstat knows that. It prints a row every
second with stats for that second. I love dstat because it&rsquo;s so simple.</p>

<pre><code>----total-cpu-usage---- -dsk/total- -net/total- ---paging-- ---system--
usr sys idl wai hiq siq| read  writ| recv  send|  in   out | int   csw 
 32  38  30   0   0   0|  28k   81k|   0     0 |   4B  123B| 441  2184 
 12  29  59   0   0   0|   0   184k|  66B   86B|   0     0 |1428  6031 
  9  26  65   0   0   0|   0   576k| 518B  528B|   0     0 |1157  4611 
  9  25  66   0   0   0|   0   144k|   0     0 |   0     0 |1100  5249 
 14  27  59   0   0   0|   0     0 |  60B    0 |   0     0 |1001  4285 
  9  29  62   0   0   0|   0   180k| 122B   82B|   0     0 |1166  5416
</code></pre>

<h3 id="lsof">lsof</h3>

<p>lsof tells you which files every process has open right now! That&rsquo;s all!
It is awesome the same way dstat and netstat are awesome &ndash; you want to
know what files are open right now, it tells you what files are open
right now, you&rsquo;re done &lt;3.</p>

<p>It can also tell you what position in the file the process is at, so you
can find out what kind of progress it&rsquo;s making reading the file.</p>

<h3 id="ngrep-tcpdump">ngrep / tcpdump</h3>

<p>Okay now we&rsquo;re moving from &ldquo;super simple tool that does one thing&rdquo; to
&ldquo;tcpdump that has a billion options and also this whole BPF berkeley
packet filter business and what is this filter language even&rdquo;. So I&rsquo;m
not going to explain how to use tcpdump because I don&rsquo;t even really
know.</p>

<p>Let&rsquo;s say you want to</p>

<ul>
<li>reverse engineer a protocol</li>
<li>find out if there&rsquo;s <em>really</em> terrible latency or if everything is slow for some other reason</li>
<li>debug why your POST request is formatted wrong in a world before google chrome dev tools</li>
</ul>

<p>To do all of this, you need to spy on network activity! ngrep and tcpdump
capture packets, let you filter them, and show you what you&rsquo;re looking for. I&rsquo;m
not going to explain how to use them here but <a href="http://dl.packetstormsecurity.net/papers/general/ngreptut.txt">this ngrep tutorial</a> looks
pretty useful. If you&rsquo;re looking at output from tcpdump you should probably
dump it to a pcap file and use Wireshark to look at it instead. Wireshark is
the best and way easier to understand because it&rsquo;s a GUI and it makes
everything pretty for you.</p>

<p>as always with these systems tools, ngrep / tcpdump will tell you The Truth™
about what&rsquo;s going on on your network.</p>

<p>If you want to know how people use tcpdump, you should read <a href="https://twitter.com/b0rk/status/585234410980712448">the replies to this tweet &ldquo;do you use tcpdump in your day-to-day life? what do you use it for?&rdquo;</a> because the people
who follow me on twitter are the best. Really go read them! There is so much
interesting stuff there.</p>

<h3 id="opensnoop-ftrace">opensnoop &amp; ftrace</h3>

<p>Do you want to know every file your system is opening right now? There&rsquo;s a
script in Brendan Gregg&rsquo;s
<a href="https://github.com/brendangregg/perf-tools">perf-tools</a> collection that does
that!</p>

<p>I&rsquo;m mostly including this as an example to show that a lot of stuff is
<em>possible</em> to know &ndash; the scripts in that repo don&rsquo;t work with every Linux kernel
version (I needed to <a href="https://github.com/brendangregg/perf-tools/pull/24">modify it</a>
to get it to work with Linux 3.13). But they use a tracing framework in
the Linux kernel called &lsquo;ftrace&rsquo; that can tell you all <em>kinds</em> of stuff.</p>

<p>ftrace seems like quite a bit of work to learn how to use, but also really
powerful. Basically you access it by doing various things to files in
<code>/sys/kernel/debug/tracing</code>, or by using a wrapper command called
<code>trace-cmd</code>. It&rsquo;s all built into Linux!</p>

<h3 id="atop">atop</h3>

<p>atop is like top, but it shows you more stuff and you need to run it as
root. So it&rsquo;ll show me the CPU &amp; memory usage for each process, but also
how much disk &amp; network I/O it&rsquo;s doing. It&rsquo;s neat and a little
terrifying to look at at first (SO MANY NUMBERS).</p>

<h3 id="wow">wow</h3>

<p>That&rsquo;s all for now! If you have other tools you frequently reach for
when trying to figure out what&rsquo;s going on on your system, I&rsquo;d be
interested to know what they are. <a href="https://twitter.com/b0rk">@b0rk</a> on
Twitter, as always :)</p>

<p>an aside &ndash; I&rsquo;ve been thinking about man pages recently, and how you can
read the man page for tcpdump and understand individually all the words,
but it&rsquo;s not a substitute for someone telling you an Awesome Story about
how they used tcpdump to debug an intermittent certificate problem or a
DNS problem and then they Saved the Day.</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spying on Hadoop with strace]]></title>
    <link href="https://jvns.ca/blog/2014/12/10/spying-on-hadoop-with-strace/"/>
    <updated>2014-12-10T21:26:49+00:00</updated>
    <id>https://jvns.ca/blog/2014/12/10/spying-on-hadoop-with-strace/</id>
    <content type="html"><![CDATA[<p>As you may already know, I really like strace. (It has a
<a href="http://jvns.ca/blog/categories/strace/">whole category on this blog</a>).
So when the people at Big Data Montreal asked if I wanted to give a talk
about stracing Hadoop, the answer was YES OBVIOUSLY.</p>

<p>I set up a small Hadoop cluster (1 master, 2 workers, replication set to
1) on Google Compute Engine to get this working, so that&rsquo;s what we&rsquo;ll be
talking about. It has one 14GB CSV file, which contains part of this
<a href="https://cloud.google.com/bigquery/docs/dataset-wikipedia">Wikipedia revision history dataset</a></p>

<p>Let&rsquo;s start diving into HDFS! (If this is familiar to you, I talked
about a lot of this already in <a href="http://jvns.ca/blog/2014/05/15/diving-into-hdfs/">Diving into HFDS</a>. There are new
things, though! At the end of this we edit the blocks on the data node
and see what happens and it&rsquo;s GREAT.)</p>

<p></p>

<pre><code>$ snakebite ls -h /
-rw-r--r--   1 bork       supergroup       14.1G 2014-12-08 02:13 /wikipedia.csv
</code></pre>

<h2 id="files-are-split-into-blocks">Files are split into blocks</h2>

<p>HDFS is a distributed filesystem, so a file can be split across many
machines. I wrote a little module to help explore how a file is
distributed. Let&rsquo;s take a look!</p>

<p>You can see the source code for all this in
<a href="https://github.com/jvns/hadoop_fun/blob/20b8c4c8d4280da7d0543fd98473b79916435d9d/hdfs_fun.py">hdfs_fun.py</a>.</p>

<pre><code>import hdfs_fun
fun = hdfs_fun.HDFSFun()
blocks = fun.find_blocks('/wikipedia.csv')
fun.print_blocks(blocks)
</code></pre>

<p>which outputs</p>

<pre><code>     Bytes |   Block ID | # Locations |       Hostnames
 134217728 | 1073742025 |           1 |      hadoop-w-1
 134217728 | 1073742026 |           1 |      hadoop-w-1
 134217728 | 1073742027 |           1 |      hadoop-w-0
 134217728 | 1073742028 |           1 |      hadoop-w-1
 134217728 | 1073742029 |           1 |      hadoop-w-0
 134217728 | 1073742030 |           1 |      hadoop-w-1
 ....
 134217728 | 1073742136 |           1 |      hadoop-w-0
  66783720 | 1073742137 |           1 |      hadoop-w-1
</code></pre>

<p>This tells us that <code>wikipedia.csv</code> is split into 113 blocks, which are
all 128MB except the last one, which is smaller. They have block IDs
1073742025 - 1073742137. Some of them are on hadoop-w-0, and some are on
hadoop-w-1.</p>

<p>Let&rsquo;s see the same thing using strace!</p>

<pre><code> $ strace -f -o strace.out snakebite cat /wikipedia.csv | head
</code></pre>

<h3 id="part-1-talk-to-the-namenode">Part 1: talk to the namenode!</h3>

<p>We ask the namenode where /wikipedia.csv is&hellip;</p>

<pre><code>connect(4, {sa_family=AF_INET, sin_port=htons(8020),
    sin_addr=inet_addr(&quot;10.240.98.73&quot;)}, 16)
sendto(4,
    &quot;\n\21getBlockLocations\22.org.apache.hadoop.hdfs.protocol.ClientProtocol\30\1&quot;,
    69, 0, NULL, 0) = 69
sendto(4, &quot;\n\16/wikipedia.csv\20\0\30\350\223\354\2378&quot;, 24, 0, NULL, 0) = 24
</code></pre>

<p>&hellip; and get an answer!</p>

<pre>
recvfrom(4,
"\255\202\2\n\251\202\2\10\350\223\354\2378\22\233\2\n7\n'BP-572418726-10.240.98.73-1417975119036\20\311\201\200\200\4\30\261\t
\200\200\200@\20\0\32\243\1\nk\n\01610.240.146.168\22%<b>hadoop-w-1</b>.c.stracing-hadoop.internal\32$358043f6-051d-4030-ba9b-3cd0ec283f6b
\332\206\3(\233\207\0030\344\206\0038\0\20\200\300\323\356&\30\200\300\354\372\32
\200\240\377\344\4(\200\300\354\372\0320\374\260\234\276\242)8\1B\r/default-rackP\0X\0`\0
\0*\10\n\0\22\0\32\0\"\0002\1\0008\1B'DS-3fa133e4-2b17-4ed1-adca-fed4767a6e6f\22\236\2\n7\n'BP-572418726-10.240.98.73-1417975119036\20\312\201\200\200\4\30\262\t
\200\200\200@\20\200\200\200@\32\243\1\nk\n\01610.240.146.168\22%<b>hadoop-w-1</b>.c.stracing-hadoop.internal\32$358043f6-051d-4030-ba9b-3cd0ec283f6b
\332\206\3(\233\207\0030\344\206\0038\0\20\200\300\323\356&\30\200\300\354\372\32
\200\240\377\344\4(\200\300\354\372\0320\374\260\234\276\242)8\1B\r/default-rackP\0X\0`\0
\0*\10\n\0\22\0\32\0\"\0002\1\0008\1B'DS-3fa133e4-2b17-4ed1-adca-fed4767a6e6f\22\237\2\n7\n'BP-572418726-10.240.98.73-1417975119036\20\313\201\200\200\4\30\263\t
\200\200\200@\20\200\200\200\200\1\32\243\1\nk\n\01610.240.109.224\22%<b>hadoop-w-0</b>.c.stracing-hadoop.internal\32$bd6125d3-60ea-4c22-9634-4f6f352cfa3e
\332\206\3(\233\207\0030\344\206\0038\0\20\200\300\323\356&\30\200\240\342\335\35
\200\240\211\202\2(\200\240\342\335\0350\263\257\234\276\242)8\1B\r/default-rackP\0X\0`\0
\0*\10\n\0\22\0\32\0\"\0002\1\0008\1B'DS-c5ef58ca-95c4-454d-adf4-7ceaf632c035\22\237\2\n7\n'BP-572418726-10.240.98.73-1417975119036\20\314\201\200\200\4\30\264\t
\200\200\200@\20\200\200\200\300\1\32\243\1\nk\n\01610.240.146.168\22%<b>hadoop-w-1</b>.c.stracing-hadoop.inte"...,
33072, 0, NULL, NULL) = 32737
</pre>

<p>The hostnames in this answer totally match up with the table of where we
think the blocks are!</p>

<h3 id="part-2-ask-the-datanode-for-data">Part 2: ask the datanode for data!</h3>

<p>So the next part is that we ask <code>10.240.146.168</code> for the first block.</p>

<pre><code>connect(5, {sa_family=AF_INET, sin_port=htons(50010), sin_addr=inet_addr(&quot;10.240.146.168&quot;)}, 16) = 0
sendto(5, &quot;\nK\n&gt;\n2\n'BP-572418726-10.240.98.73-1417975119036\20\311\201\200\200\4\30\261\t\22\10\n\0\22\0\32\0\&quot;\0\22\tsnakebite\20\0\30\200\200\200@&quot;, 84, 0, NULL, 0) = 84
recvfrom(5, &quot;title,id,language,wp_namespace,is_redirect,revision_id,contributor_ip,contributor_id,contributor_username,timestamp,is_minor,is_bot,reversion_id,comment,num_characters\nIvan Tyrrell,6126919,,0,true,264190184,,37486,Oddharmonic,1231992299,,,,\&quot;Added defaultsort tag, categories.\&quot;,2989\nInazuma Raigor\305\215,9124432,,0,,224477516,,2995750,ACSE,1215564370,,,,/* Top division record */ rm jawp reference,5557\nJeb Bush,189322,,0,,299771363,66.119.31.10,,,1246484846,,,,/* See also */,43680\nTalk:Goranboy (city),18941870,,1,,&quot;, 512, 0, NULL, NULL) = 512
recvfrom(5, &quot;233033452,,627032,OOODDD,1219200113,,,,talk page tag  using [[Project:AutoWikiBrowser|AWB]],52\nTalk:Junk food,713682,,1,,210384592,,6953343,D.c.camero,1210013227,,,,/* Misc */,13654\nCeline Dion (album),3294685,,0,,72687473,,1386902,Max24,1156886471,,,,/* Chart Success */,4578\nHelle Thorning-Schmidt,1728975,,0,,236428708,,7782838,Vicki Reitta,1220614668,,,,/* Member of Folketing */  updating (according to Danish wikipedia),5389\nSouthwest Florida International Airport,287529,,0,,313446630,76.101.171.136,,,125&quot;, 512, 0, NULL, NULL) = 512
</code></pre>

<pre><code>$ strace -e connect snakebite cat /wikipedia.csv &gt; /dev/null
connect(5, {sa_family=AF_INET, sin_port=htons(50010), sin_addr=inet_addr(&quot;10.240.146.168&quot;)}, 16) = 0
connect(5, {sa_family=AF_INET, sin_port=htons(50010), sin_addr=inet_addr(&quot;10.240.146.168&quot;)}, 16) = 0
connect(5, {sa_family=AF_INET, sin_port=htons(50010), sin_addr=inet_addr(&quot;10.240.109.224&quot;)}, 16) = 0
connect(5, {sa_family=AF_INET, sin_port=htons(50010), sin_addr=inet_addr(&quot;10.240.146.168&quot;)}, 16) = 0
connect(5, {sa_family=AF_INET, sin_port=htons(50010), sin_addr=inet_addr(&quot;10.240.109.224&quot;)}, 16) = 0
</code></pre>

<p>This sequence matches up exactly with the order of the blocks in the
table up at the top! So fun. Next, we can look at the message the client
is sending to the datanodes:</p>

<pre><code>sendto(5, &quot;\nK\n&gt;\n2\n'BP-572418726-10.240.98.73-1417975119036\20\311\201\200\200\4\30\261\t\22\10\n\0\22\0\32\0\&quot;\0\22\tsnakebite\20\0\30\200\200\200@&quot;, 84, 0, NULL, 0) = 84
</code></pre>

<p>This is a little hard to read, but it turns out it&rsquo;s a
<a href="https://code.google.com/p/protobuf/">Protocol Buffer</a> and so we can
parse it pretty easily. Here&rsquo;s what it&rsquo;s trying to say:</p>

<pre><code>OpReadBlockProto
header {
  baseHeader {
    block {
      poolId: &quot;BP-572418726-10.240.98.73-1417975119036&quot;
      blockId: 1073742025
      generationStamp: 1201
    }
    token {
      identifier: &quot;&quot;
      password: &quot;&quot;
      kind: &quot;&quot;
      service: &quot;&quot;
    }
  }
  clientName: &quot;snakebite&quot;
}
</code></pre>

<p>And then, of course, we get a response:</p>

<pre><code>recvfrom(5,&quot;title,id,language,wp_namespace,is_redirect,revision_id,contributo
r_ip,contributor_id,contributor_username,timestamp,is_minor,is_bot
,reversion_id,comment,num_characters\nIvanTyrrell,6126919,,0,true,264190184,,
37486,Oddharmonic,1231992299,,,,\&quot;Addeddefaultsorttag,categorie
s.\&quot;,2989\nInazumaRaigor\305\215,9124432,,0,,224477516,,2995750,ACSE,12155643
70,,,,/*Topdivisionrecord*/rmjawpreference,5557\nJebBush,1
89322,,0,,299771363,66.119.31.10,,,1246484846,,,,/*Seea
</code></pre>

<p>Which is just the beginning of a CSV file! How wonderful.</p>

<h3 id="part-3-finding-the-block-on-the-datanode">Part 3: Finding the block on the datanode.</h3>

<p>Seeing the datanode send us the data is nice, but what if we want to get
even closer to the data? It turns out that this is really easy. I sshed
to my data node and ran</p>

<pre><code>$ locate 1073742025
</code></pre>

<p>with the idea that maybe there was a file with <code>1073742025</code> in the name that had the block data. And there was!</p>

<pre><code>$ cd /hadoop/dfs/data/current/BP-572418726-10.240.98.73-1417975119036/current/finalized
$ ls -l blk_1073742025
-rw-r--r-- 1 hadoop hadoop 134217728 Dec 8 02:08 blk_1073742025
</code></pre>

<p>It has exactly the right size (134217728 bytes), and if we look at the beginning, it contains exactly the data from the first 128MB of the CSV file. GREAT.</p>

<h3 id="super-fun-exciting-part-editing-the-block-on-the-datanode">Super fun exciting part: <strong>Editing</strong> the block on the datanode</h3>

<p>So I was giving this talk yesterday, and was doing a live demo where I
was ssh&rsquo;d into the data node, and we were looking at the file for the
block. And suddenly I thought&hellip; WAIT WHAT IF WE EDITED IT GUYS?!</p>

<p>And someone commented &ldquo;No, it won&rsquo;t work, there&rsquo;s metadata, the checksum
will fail!&ldquo;. So, of course, we tried it, because toy clusters are for
breaking.</p>

<p>And it worked! Which wasn&rsquo;t perhaps super surprising because replication
was set to 1 and maybe a 128MB file is too big to take a checksum of
every time you want to read from it, but REALLY FUN. I edited the
beginning of the file to say <code>AWESOME AWESOME AWESOME</code> instead of
whatever it said before (keeping the file size the same), and then a
<code>snakebite cat /wikipedia.csv</code> showed the file starting with <code>AWESOME
AWESOME AWESOME</code>.</p>

<p>So some lessons:</p>

<ul>
<li>I&rsquo;d really like to know more about data consistency in Hadoop clusters</li>
<li>live demos are GREAT</li>
<li>writing a blog is great because then people ask me to give talks about
fun things I write about like stracing Hadoop</li>
</ul>

<p>That&rsquo;s all folks! There are <a href="https://speakerdeck.com/jvns/spying-on-hadoop-with-strace">slides for the talk I gave</a>, though
this post is guaranteed to be much better than the slides. And maybe
video for that talk will be up at some point.</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Diving into HDFS]]></title>
    <link href="https://jvns.ca/blog/2014/05/15/diving-into-hdfs/"/>
    <updated>2014-05-15T12:40:39+00:00</updated>
    <id>https://jvns.ca/blog/2014/05/15/diving-into-hdfs/</id>
    <content type="html"><![CDATA[<p>Yesterday I wanted to start learning about how HDFS (the Hadoop
Distributed File System) works internally. I knew that</p>

<ul>
<li>It&rsquo;s distributed, so one file may be stored across many different
machines</li>
<li>There&rsquo;s a <em>namenode</em>, which keeps track of where all the files are
stored</li>
<li>There are <em>data nodes</em>, which contain the actual file data</li>
</ul>

<p>But I wasn&rsquo;t quite sure how to get started! I knew how to navigate the
filesystem from the command line (<code>hadoop fs -ls /</code>, and friends), but
not how to figure out how it works internally.</p>

<p></p>

<p><a href="http://twitter.com/colinmarc">Colin Marc</a> pointed me to this great
library called <a href="https://github.com/spotify/snakebite">snakebite</a> which
is a Python HDFS client. In particular he pointed me to the part of
the code that
<a href="https://github.com/spotify/snakebite/blob/master/snakebite/client.py#L966-L1033">reads file contents from HDFS</a>.
We&rsquo;re going to tear it apart a bit and see what exactly it does!</p>

<h3 id="getting-started-elastic-mapreduce">Getting started: Elastic MapReduce!</h3>

<p>I didn&rsquo;t want to set up a Hadoop cluster by hand, and I had some AWS
credit that I&rsquo;d gotten for free, so I set up a small Amazon Elastic
MapReduce cluster. I worked on this with with
<a href="https://twitter.com/ptn777">Pablo Torres</a> and
<a href="https://twitter.com/SashaLaundy">Sasha Laundy</a> and we spent much of
the morning fighting with it and trying to figure out protocol
versions and why it wasn&rsquo;t working with Snakebite.</p>

<p>What ended up working was choosing AMI version &ldquo;3.0.4 (hadoop 2.2.0)&rdquo;.
This is CDH5 and Hadoop protocol version 9. Hadooop versions are
<em>confusing</em>. We installed that and Snakebite version 2.4.1 and that
almost worked.</p>

<p><strong>Important things</strong>:</p>

<ul>
<li>We needed to look at <code>/home/hadoop/conf/core-site.xml</code> to find the
namenode IP and port (in <code>fs.default.name</code></li>
<li>We needed to edit
<a href="https://github.com/spotify/snakebite/blob/25418007e93f99f6dc6807ca44d25287217e783f/snakebite/config.py">snakebite/config.py</a>
to say &lsquo;fs.default.name&rsquo; instead of &lsquo;fs.defaultFS&rsquo;. Who knows. It
worked.</li>
</ul>

<p>Once we did this, we could run <code>snakebite ls /</code> successfully! Time to
move on to breaking things!</p>

<h3 id="putting-data-into-our-cluster">Putting data into our cluster</h3>

<p>I copied some Wikipedia data from one of Amazon&rsquo;s public datasets like
this;</p>

<p><code>hadoop distcp
s3://datasets.elasticmapreduce/wikipediaxml/part-116.xml /wikipedia</code></p>

<p>This creates a file in HDFS called <code>/wikipedia</code>. You can see more
datasets that are easy to copy into HDFS from Amazon at
<a href="https://s3.amazonaws.com/datasets.elasticmapreduce/">https://s3.amazonaws.com/datasets.elasticmapreduce/</a>.</p>

<h3 id="getting-a-block-from-our-file">Getting a block from our file!</h3>

<p>Now that we have a Hadoop cluster, some data in HDFS, and a tool to
look at it with (snakebite), we can really get started!</p>

<p>Files in HDFS are split into <em>blocks</em>. When getting a file from HDFS,
the first thing we need to do is to ask the namenode where the blocks
are stored.</p>

<p>With the help of a lot of snakebite source diving, I write a small
Python function to do this called <code>find_blocks</code>. You can see it in a
tiny Python module I made called
<a href="https://github.com/jvns/hadoop_fun/blob/master/hdfs_fun.py">hdfs_fun.py</a>.
To get it to work, you&rsquo;ll need a Hadoop cluster and snakebite.</p>

<pre>
>>> cl = hdfs_fun.create_client()
>>> hdfs_fun.find_blocks(cl, '/wikipedia')
[snakebite.protobuf.hdfs_pb2.LocatedBlockProto at 0xe33a910,
 snakebite.protobuf.hdfs_pb2.LocatedBlockProto at 0xe33ab40
</pre>

<p>One of the first things I did was use <code>strace</code> to find out what data actually gets sent over the wire when I call this function. Here&rsquo;s a snippet: (<a href="https://gist.github.com/jvns/bc054ea0f38b5054fd3a">the whole thing</a>)</p>

<p>Part of the request: asking for the block locations for the
<code>/wikipedia</code> file.
<pre>
sendto(7,
&ldquo;\n\21getBlockLocations\22.org.apache.hadoop.hdfs.protocol.ClientProtocol\30\1&rdquo;,
69, 0, NULL, 0) = 69
sendto(7, &ldquo;\n\n/wikipedia\20\0\30\337\260\240]&ldquo;, 19, 0, NULL, 0) = 19
</pre></p>

<p>Part of the response: (I&rsquo;ve removed most of it to point out some of
the important parts)
<pre>
recvfrom(7,
&ldquo;&hellip;.BP-1019336183-10.165.43.39-1400088409498&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;..
10.147.177.170-9200-1400088495802&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;
BP-1019336183-10.165.43.39-1400088409498&hellip;&hellip;&hellip;&hellip;.10.147.177.170-9200-1400088495802
\360G(\216G0\361G8\0\20\200\240\201\213\275\f\30\200\340\376]
\200\300\202\255\274\f(\200\340\376]0\212\306\273\205\340(8\1B\r/default-rackP\0
\0*\10\n\0\22\0\32\0\&rdquo;\0\30\0\&rdquo;\355&rdquo;, 731, 0, NULL, NULL) = 731
</pre></p>

<p>Back in our Python console, we can see what some of these numbers mean:</p>

<pre>
>>> blocks[0].b.poolId
u'BP-1019336183-10.165.43.39-1400088409498'
>>> blocks[0].b.numBytes
134217728L
>>> blocks[0].locs[0].id.ipAddr
u'10.147.177.170'
>>> blocks[0].locs[0].id.xferPort
9200
>>> blocks[1].b.poolId
u'BP-1019336183-10.165.43.39-1400088409498'
>>> blocks[1].b.numBytes
61347935L
</pre>

<p>So we have two blocks! The two <code>numBytes</code> add up to the total size of
the file! Cool! They both have the same <code>poolId</code>, and it also turns
out that they have the same IP address and port</p>

<h3 id="reading-a-block">Reading a block</h3>

<p>Let&rsquo;s try to read the data from a block! (you can see the <code>read_block</code>
function here in
<a href="https://github.com/jvns/hadoop_fun/blob/master/hdfs_fun.py">hdfs_fun.py</a></p>

<pre>
>>> block = blocks[0]
>>> gen = hdfs_fun.read_block(block) # returns a generator
>>> load = gen.next()
</pre>

<p>If I look at <code>strace</code>, it starts with:
<pre>
connect(8, {sa_family=AF_INET, sin_port=htons(9200),
    sin_addr=inet_addr(&ldquo;10.147.177.170&rdquo;)}, 16) = 0
sendto(8,
    &ldquo;\nB\n5\n3\n(BP-1019336183-10.165.43.39-1400088409498\20\211\200\200\200\4\30\361\7\22\tsnakebite\20\0\30\200\200\200@&ldquo;,
    75, 0, NULL, 0) = 75
</pre></p>

<p><em>Awesome</em>. We can see easily that it&rsquo;s connecting to the block&rsquo;s data
 node (<code>10.147.177.170</code> on port <code>9200</code>, and asking for something with
 id <code>BP-1019336183-10.165.43.39-1400088409498</code>). Then the data node
 starts sending back data!!!</p>

<pre>
recvfrom(8, "ot, it's a painting. Thomas Graeme apparently lived in
the mid-18th century, according to the [[Graeme Park]] article. The
rationale also says that this image is &quot;used on the biography
page about him by USHistory.org of Graeme Park.&quot; I cannot quite
figure out what this means, but I am guessing that it means the
uploader took this image from a page hosted on USHistory.org. A
painting of a man who lived in the mid-18th century is likely to be
the public domain, as claimed, but we have no good source", 512, 0,
NULL, NULL) = 512
</pre>

<p>AMAZING. We have conquered HDFS.</p>

<p>That&rsquo;s all for this blog post! We&rsquo;ll see if I do more later today.</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debug your programs like they&#39;re closed source!]]></title>
    <link href="https://jvns.ca/blog/2014/04/20/debug-your-programs-like-theyre-closed-source/"/>
    <updated>2014-04-20T18:30:54+00:00</updated>
    <id>https://jvns.ca/blog/2014/04/20/debug-your-programs-like-theyre-closed-source/</id>
    <content type="html"><![CDATA[<p>Until very recently, if I was debugging a program, I practically
always did one of these three things:</p>

<ol>
<li>open a debugger</li>
<li>look at the source code</li>
<li>insert some print statements</li>
</ol>

<p>I&rsquo;ve started sometimes debugging a new way. With this method, I don&rsquo;t
look at the source code, don&rsquo;t edit the source code, and don&rsquo;t use a
debugger. I don&rsquo;t even need to have the program&rsquo;s source available to
me!</p>

<p>Can we repeat that again? I can look at the internal behavior of
<em>closed-source programs</em>.</p>

<p>How?!?! AM I A WIZARD? Nope. SYSTEM CALLS! What is a system call?
Operating systems know how to open files, display things to the
screen, start processes, and all kinds of things. Programs can ask
their operating system to do these things, using functions called
<strong>system calls</strong>.</p>

<p></p>

<p>System calls are the API for your computer, so you don&rsquo;t have to know
how a network card works to send a HTTP request.</p>

<p>Here&rsquo;s a list of the
<a href="http://docs.cs.up.ac.za/programming/asm/derick_tut/syscalls.html">system calls Linux 2.2</a>
provides, to give you a sense for what&rsquo;s available. There&rsquo;s <code>exit</code>,
<code>open</code>, <code>read</code>, <code>write</code>, <code>time</code>, <code>mount</code>, <code>kill</code>, and all kinds of
other things. System calls are basically the definition of platform
specific (different operating system have different system calls), so
we&rsquo;re only going to be talking about Linux here.</p>

<p>How can we use these to debug? Here are a few of my favorite system
calls!</p>

<h2 id="open">open</h2>

<p><code>open</code> opens files. Every time any program opens a file it needs to
use the <code>open</code> system call. There&rsquo;s no other way.</p>

<p>So! Let&rsquo;s say you have a backup program on your computer, and you want
to know which files it&rsquo;s working on. And that it doesn&rsquo;t show you a
progress bar or have any options. Let&rsquo;s say that it has PID 60.</p>

<p>We can spy on this program with a tool called <code>strace</code> and print out
every file it opens! <code>strace</code> shows you which system calls a program
calls. To spy on our backup program, we would run <code>strace -e trace=open
-p 60</code>, to tell it to print all the <code>open</code> system calls from PID 60.</p>

<p>For example, I ran <code>strace -e trace=open ssh</code> and here were some of the
things I found:</p>

<pre>
open("/etc/ssh/ssh_config", O_RDONLY)   = 3
open("/home/bork/.ssh/config", O_RDONLY) = 3
open("/home/bork/.ssh/id_dsa", O_RDONLY) = 4
open("/home/bork/.ssh/id_dsa.pub", O_RDONLY) = 4
open("/home/bork/.ssh/id_rsa", O_RDONLY) = 4
open("/home/bork/.ssh/id_rsa.pub", O_RDONLY) = 4
open("/home/bork/.ssh/known_hosts", O_RDONLY) = 4
</pre>

<p>This makes total sense! <code>ssh</code> needs to read my private and public
keys, my local ssh config, and the global ssh config. Neat! <code>open</code> is
super simple and super useful.</p>

<h2 id="execve">execve</h2>

<p><code>execve</code> starts programs. All programs. There&rsquo;s no way to start a
program except to use <code>execve</code>. We can use <code>strace</code> to spy on <code>execve</code>
calls too!</p>

<p>For example! I was trying to understand a Ruby script that was
basically just running some <code>ssh</code> commands. I could have read the Ruby
code! But I really just wanted to know which damn command it was
running! I did this by running <code>strace -f -s3000 -e trace=execve</code> and
read zero code!</p>

<p>The <code>-f</code> option is super important here. It also tracks the system
calls of every subprocess! I basically use <code>-f</code> all the time. Use
<code>-f</code>.
(<a href="/blog/2014/02/26/using-strace-to-avoid-reading-ruby-code/">[longer blog post about using strace + execve to poke at Ruby programs]</a>).</p>

<h2 id="write">write</h2>

<p><code>write</code> writes to files. I think there are ways to write to a file
without using <code>write</code> (like by using <code>mmap</code>), but <em>usually</em> if a file
is being written to, it&rsquo;s using <code>write</code>.</p>

<p>If I <code>strace -e trace=write</code> on an <code>ssh</code> session, this is some of what
I see:</p>

<pre>
write(3, "SSH-2.0-OpenSSH_5.9p1 Debian-5ubuntu1.1\r\n", 41) = 41
[...]
write(5, "[jvns /home/public]$ ", 21)   = 21
write(3, "\242\227e\376\344\36\270\343\331\307\231\332\373\273\324\303X\n<\241p`\212\21\317\353`\1/\3629\273m\23\17\26\304\fJ\352z\210\2\210\211~7W", 48) = 48
write(5, "logout\r\n", 8)               = 8
write(3, "b\277\306\16!\6J\202\tF$\241\32\302\3\0\23\310\346f\241\233\263\254\325\351z\222\234\224\270\231", 32) = 32
write(3, "\311\372\353\273\233oU\226~\373N\227\323*S\263\307\272\204VzO \10\2\316\224\335X@Hj\26\366\271J:i6\311\240A\325\331\341\220\1%\233\240\23n\23\242\34\277\2139\376\31j\255\32h", 64) = 64
write(2, "Connection to ssh.phx.nearlyfreespeech.net closed.\r\n", 52) = 52
</pre>

<p>So it opens an SSH connection, writes a prompt to my terminal, sends
some (encrypted!) data over the connection, and prints that the
connection is closed! Neat! I understand a bit more about how ssh
works now!</p>

<h2 id="proc">/proc</h2>

<p>I want to talk about one more Linux thing, and it isn&rsquo;t a system call.
It&rsquo;s a directory called <code>/proc</code>! There are a million things that
<code>/proc</code> does, but this is my favorite:</p>

<p><code>/proc</code> tells you every file your process has open. All of them! For
example, one of my Chrome processes has PID 3823. If I run <code>ls -l
/proc/3823/fd/*</code>, it shows me all the files Chrome has open!</p>

<p><code>fd</code> stands for &ldquo;file descriptor&rdquo;.</p>

<pre>
$ ls -l /proc/3823/fd/*
total 0
lr-x------ 1 bork bork 64 Apr 19 09:28 0 -> /dev/null
l-wx------ 1 bork bork 64 Apr 19 09:28 1 -> /dev/null
lrwx------ 1 bork bork 64 Apr 19 09:28 10 -> socket:[16583]
lr-x------ 1 bork bork 64 Apr 19 09:28 100 -> /opt/google/chrome/nacl_irt_x86_64.nexe
lrwx------ 1 bork bork 64 Apr 19 09:28 101 -> /home/bork/.config/google-chrome/Default/Application Cache/Cache/index
lrwx------ 1 bork bork 64 Apr 19 09:28 102 -> /home/bork/.config/google-chrome/Default/Application Cache/Cache/data_0
lrwx------ 1 bork bork 64 Apr 19 09:28 103 -> socket:[178726]
lrwx------ 1 bork bork 64 Apr 19 09:28 104 -> socket:[21064]
lrwx------ 1 bork bork 64 Apr 19 09:28 105 -> /home/bork/.config/google-chrome/Default/Application Cache/Cache/data_1
lrwx------ 1 bork bork 64 Apr 19 09:28 106 -> /home/bork/.config/google-chrome/Default/Application Cache/Cache/data_2
lrwx------ 1 bork bork 64 Apr 19 09:28 107 -> /home/bork/.config/google-chrome/Default/Application Cache/Cache/data_3
</pre>

<p>aaaand a million more. This is great. There are also a ton more things
in <code>/proc/3823</code>. Look around! I wrote a bit more about <code>/proc</code> in
<a href="http://jvns.ca/blog/2014/03/23/recovering-files-using-slash-proc-and-other-useful-facts/">Recovering files using /proc (and spying, too!)</a>.</p>

<h2 id="ltrace-beyond-system-calls">ltrace: beyond system calls!</h2>

<p>Lots of things happen outside of the kernel. Like string comparisons!
I don&rsquo;t need a network card for that! What if we wanted to know about
those? <code>strace</code> won&rsquo;t help us at all. But <code>ltrace</code> will!</p>

<p>Let&rsquo;s try running <code>ltrace killall firefox</code>. We see a bunch of things
like this:</p>

<pre>
fopen("/proc/10578/stat", "r")                               => 0x11984f0
free(0x011984d0)
fscanf(0x11984f0, 0x403fe7, 0x7fff09984980, 0x7f2fc7cd4728, 0)
fclose(0x11984f0)
strcmp("firefox", "kworker/u:0")
</pre>

<p>So! We&rsquo;ve just learned that <code>killall</code> works by opening a file in
<code>/proc</code> (wheeee!), finding what its name is, and seeing if it&rsquo;s the
same as &ldquo;firefox&rdquo;. That makes sense!</p>

<h2 id="when-are-these-tools-useful">When are these tools useful?</h2>

<p>These systems-level debugging tools are only appropriate sometimes. If
you&rsquo;re writing a graph traversal algorithm and it has a logical error,
knowing which files it opened won&rsquo;t help you at all!</p>

<p>Here are some examples of times when using systems tools might make
your life easier:</p>

<ul>
<li>Is your program running a command, but the wrong one? Look at
<code>execve</code>!</li>
<li>Your program communicates with something on a network, but some of
the information it&rsquo;s sending is wrong? It&rsquo;s probably sending it with
<code>write</code>, <code>sendto</code>, or <code>send</code>.</li>
<li>Your program writes to a file, but you don&rsquo;t know what file it&rsquo;s
writing to? Use <code>/proc</code> to see what files it has open, or look at
what it&rsquo;s <code>write</code>ing. <code>/proc</code> doesn&rsquo;t lie.</li>
</ul>

<p>At first debugging this way is confusing, but once you&rsquo;re familiar
with the tools it can actually be faster, because you don&rsquo;t have to
worry about getting the wrong information! And you feel like a WIZARD.</p>

<h2 id="learn-your-operating-system-instead-of-a-new-debugger">Learn your operating system instead of a new debugger</h2>

<p>There are all kinds of programming-language-specific debugging tools
you can use. <code>gdb</code>! <code>pry</code>! <code>pdb</code>! And you should! But you probably
switch languages more often than you switch OSes. So, learning your OS
in depth and then using it as a debugging tool is likely a better
investment of your time than learning a language-specific debugging
tool.</p>

<p>If you want to know which files a process has open, it doesn&rsquo;t matter
if that program was originally written in C++ or Python or Java or
Haskell. The <em>only way</em> for a program to open a file on Linux is with
the <code>open</code> system call. If you learn your operating system, you
acquire superpowers. You can debug programs that are binary-only and
closed source. You can use the same tools to debug no matter which
language you&rsquo;re writing.</p>

<p>And my favorite thing about these methods is that your OS won&rsquo;t lie to
you. The <strong>only way</strong> to run a program is with the <code>execve</code> system
call. There aren&rsquo;t other ways. So if you really want to know what
command got run, use <code>strace</code>. See exactly which parameters get passed
to <code>execve</code>. You&rsquo;ll know exactly what happened.</p>

<h2 id="further-reading">Further reading</h2>

<p>Try Greg Price&rsquo;s excellent blog post
<a href="https://blogs.oracle.com/ksplice/entry/strace_the_sysadmin_s_microscope">Strace &ndash; The Sysadmin&rsquo;s Microscope</a>.
I have an
<a href="/blog/categories/strace">ever-growing collection of blog posts about strace</a>,
too!</p>

<p>My favorite way to learn more, honestly, is to just strace random
programs and see what I find out. It&rsquo;s a great way to spend a rainy
Sunday afternoon! =)</p>

<p>Thanks to <a href="http://composition.al/">Lindsey Kuper</a> and
<a href="http://danluu.com">Dan Luu</a> for reading a draft of this :)</p>

<p>Have fun!</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debugging shared library problems with strace]]></title>
    <link href="https://jvns.ca/blog/2014/03/10/debugging-shared-library-problems-with-strace/"/>
    <updated>2014-03-10T20:46:10+00:00</updated>
    <id>https://jvns.ca/blog/2014/03/10/debugging-shared-library-problems-with-strace/</id>
    <content type="html"><![CDATA[<p>It&rsquo;s official. I have a love affair with strace.</p>

<p>So strace is this Linux command that shows you what system calls a program
calls.</p>

<p>This doesn&rsquo;t sound so useful until you find out that it is useful FOR
EVERYTHING. Seriously. strace is like an immersion blender. I use strace more
than my immersion blender.</p>

<p></p>

<p>Previously we have used strace to
<a href="http://jvns.ca/blog/2013/12/22/fun-with-strace/">find out how killall works</a>,
<a href="http://jvns.ca/blog/2014/02/17/spying-on-ssh-with-strace/">spy on ssh</a>,
<a href="http://jvns.ca/blog/2014/02/26/using-strace-to-avoid-reading-ruby-code/">avoid reading Ruby code</a>, and
<a href="http://jvns.ca/blog/2014/02/27/more-practical-uses-for-strace/">more</a>.</p>

<p>So today I had was trying to install the
<a href="https://github.com/minad/iruby/">IRuby notebook</a>. But my version of libzmq was wrong! So I upgraded it. But it was STILL WRONG. Why? WHY?</p>

<p>So I thought, I will get strace to tell me which shared libraries are being loaded! strace will never lie to me. Here&rsquo;s how to do that:</p>

<pre><code>strace -f -o /tmp/iruby_problems ~/clones/iruby/bin/iruby notebook
grep libzmq.so /tmp/iruby_problems | grep -v ENOENT
</code></pre>

<p>The <code>grep -v ENOENT</code> is because it looks everywhere in my LD_LIBRARY_PATH so it
fails to find libzmq a bunch of times. This reveals the following two system
calls:</p>

<pre><code>28863 open(&quot;/opt/anaconda/lib/python2.7/site-packages/zmq/utils/../../../../libzmq.so.3&quot;, O_RDONLY|O_CLOEXEC) = 9
28910 open(&quot;/usr/lib/libzmq.so&quot;, O_RDONLY|O_CLOEXEC) = 9
</code></pre>

<p>AH HA. The first libzmq is the right version (<code>libzmq.so.3</code>), but the second one is all wrong! It is <code>libzmq1</code> and it is a disaster and a disgrace. I did <code>sudo apt-get remove libzmq1</code> and the offending <code>libzmq</code> was banished from my system.</p>

<p>Thanks, strace :)</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[More practical uses for strace!]]></title>
    <link href="https://jvns.ca/blog/2014/02/27/more-practical-uses-for-strace/"/>
    <updated>2014-02-27T07:25:36+00:00</updated>
    <id>https://jvns.ca/blog/2014/02/27/more-practical-uses-for-strace/</id>
    <content type="html"><![CDATA[<p>In yesterday&rsquo;s blog post on
<a href="http://jvns.ca/blog/2014/02/26/using-strace-to-avoid-reading-ruby-code/">using strace to avoid reading Ruby code</a>
I asked the Internet for some more suggestions of practical uses for
strace.</p>

<p>There were so many excellent suggestions that I couldn&rsquo;t not share!</p>

<p><a href="http://twitter.com/gazoombo">Mike English</a> pointed me to this
<em>wonderful</em>
blog post<br />
<a href="http://spin.atomicobject.com/2013/08/19/debug-ruby-processes/">Tools for Debugging Running Ruby Processes</a>
he wrote about using strace, lsof, and gdb to debug a running Ruby
processes. He remarks that some of the things are like open-heart
surgery &ndash; you can go into a running Ruby process and execute code
using gdb, but you might kill the process. Super cool and definitely
worth a read.</p>

<p>Some more great suggestions of what to do with strace:</p>

<p></p>

<p>Look for the &lsquo;open&rsquo; system call!</p>

<blockquote class="twitter-tweet" lang="en"><p><a
href="https://twitter.com/mjdominus">@mjdominus</a> <a
href="https://twitter.com/b0rk">@b0rk</a> Also invaluable when
sandboxing programs and trying to figure out where they are loading
shared libraries from.</p>&mdash; Eiríkr Åsheim (@d6) <a
href="https://twitter.com/d6/statuses/438904114597347329">February 27,
2014</a></blockquote>

<blockquote class="twitter-tweet" data-conversation="none"
lang="en"><p><a href="https://twitter.com/b0rk">@b0rk</a> While
looking at git performance, I&#39;ve used strace -c as well as <a
href="https://twitter.com/pgbovine">@pgbovine</a>&#39;s
strace-plus.</p>&mdash; David Turner (@NovalisDMT) <a
href="https://twitter.com/NovalisDMT/statuses/438901005108133888">February
27, 2014</a></blockquote>

<p>A suggestion to also use ltrace:</p>

<blockquote class="twitter-tweet" data-conversation="none"
lang="en"><p><a href="https://twitter.com/b0rk">@b0rk</a> all I know
is that I usually start with strace, get annoyed with it, then
remember to use ltrace instead. :-)</p>&mdash; Brian Mastenbrook
(@bmastenbrook) <a
href="https://twitter.com/bmastenbrook/statuses/438878838257250305">February
27, 2014</a></blockquote>

<p><blockquote class="twitter-tweet" data-conversation="none"
lang="en"><p><a href="https://twitter.com/b0rk">@b0rk</a> check out
syscall tracing on Linux, it&#39;s like strace for the whole system,
handy if you want to know which process is doing something.</p>&mdash;
Michael Ellerman (@michaelellerman) <a
href="https://twitter.com/michaelellerman/statuses/438994429219586051">February
27, 2014</a></blockquote> <script async
src="//platform.twitter.com/widgets.js" charset="utf-8"></script> I
didn&rsquo;t know syscall tracing was a thing! This seems very worthy of
investigation.</p>

<script async src="//platform.twitter.com/widgets.js"
charset="utf-8"></script>

<p>Here are some
<a href="http://price.mit.edu/tracing-w2014/#12">slides by Greg Price</a> with a
bunch of great suggestions for fixing various problems, as well as his
blog post
<a href="https://blogs.oracle.com/ksplice/entry/strace_the_sysadmin_s_microscope">Strace - The Sysadmin&rsquo;s Microscope</a>
from the wonderful ksplice blog.</p>

<p>Alex Clemmer wrote a super cool post on using dtruss (strace, but for
OS X/BSD) to try to better understand concurrency primitives:
<a href="http://blog.nullspace.io/day-266.html">The unfamiliar world of OS X syscalls</a>.</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using strace to avoid reading Ruby code]]></title>
    <link href="https://jvns.ca/blog/2014/02/26/using-strace-to-avoid-reading-ruby-code/"/>
    <updated>2014-02-26T18:49:06+00:00</updated>
    <id>https://jvns.ca/blog/2014/02/26/using-strace-to-avoid-reading-ruby-code/</id>
    <content type="html"><![CDATA[<p><small>
This is the start of a new category! I just started at
<a href="http://stripe.com">Stripe</a> yesterday, so this is in the
<a href="/blog/categories/stripe">things-I-am-learning-at-Stripe category</a>.
Yay!
</small></p>

<p>Yesterday I was getting set up, and we were having a problem with an
internal tool written in Ruby that was sshing somewhere. So we wanted
to know exactly what ssh command it was running. The normal way I&rsquo;d
think about doing this is by, well, reading the code. But that takes
time!</p>

<p></p>

<p>So! My new favorite thing in life is strace (as evidenced by these
<a href="http://jvns.ca/blog/2013/12/22/fun-with-strace/">two</a>
<a href="http://jvns.ca/blog/2014/02/17/spying-on-ssh-with-strace/">posts</a>)
(when all you have is a hammer&hellip;). But I wasn&rsquo;t sure that we could
use strace to figure out the ssh command.</p>

<p>But then <a href="https://twitter.com/ebroder">Evan</a> did this (or something equivalent):</p>

<p><code>strace -f -e trace=execve [the ruby command]</code></p>

<p>This looks at all the system calls that the command runs, filters out
everything that isn&rsquo;t executing a command, and also looks in all the
child processes. Grepping for ssh spat out the exact ssh command that
it was running!</p>

<p>The looking-in-all-child-processes part (<code>-f</code>) is important because it
started some subprocesses.</p>

<p>This is super fun because what I&rsquo;d usually do is go read the code to
try and figure out what it&rsquo;s doing, and reading code is hard! strace
is easy!</p>

<p>Also it&rsquo;s a great example of incidental/accidental learning. I like
working with people who know more (and different!) things than I do :)</p>

<p>I&rsquo;m trying to put together more examples of when understanding how
system calls work is useful in everyday non-kernel-hacking
programming. If you have suggestions, tell me on Twitter! I&rsquo;m
<a href="http://twitter.com/b0rk">@b0rk</a>. (or by email!)</p>

<p>(<strong>edit</strong>: <a href="http://web.mit.edu/price/">Greg Price</a> suggested using
<code>strace -e process</code> instead of <code>strace -e trace=execve</code>. It&rsquo;s shorter,
and it also shows you other process-related system calls.)</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spying on ssh with strace]]></title>
    <link href="https://jvns.ca/blog/2014/02/17/spying-on-ssh-with-strace/"/>
    <updated>2014-02-17T00:00:00+00:00</updated>
    <id>https://jvns.ca/blog/2014/02/17/spying-on-ssh-with-strace/</id>
    <content type="html"><![CDATA[<p>In the shower this morning I was thinking about strace and ltrace and
how they let you inspect the system calls a running process is making.
I&rsquo;ve played a bit with strace on this blog before (see
<a href="http://jvns.ca/blog/2013/12/22/fun-with-strace/">Understanding how killall works using strace</a>),
but it&rsquo;s clear to me that there are tons of uses for it I haven&rsquo;t
explored yet.</p>

<p>Then I thought &ldquo;Hey! If you can look at the system calls with strace
and the library calls with ltrace, can you spy on people&rsquo;s ssh
passwords?!&rdquo;</p>

<p>It turns out that you can! I was going to do original research, but as
with most things one thinks up in the shower, it turns out someone&rsquo;s
already done this before. So I googled it and I found this
<a href="http://pentestmonkey.net/blog/sshd-snooping">blog post explaining how to spy on ssh</a>.
The instructions here are just taken from there :)</p>

<p></p>

<p>The reason this is possible is that strace doesn&rsquo;t just tell you which
system calls a given program is running. It also tells you what the
arguments are! So if a program ever calls a function with a password
the odds are pretty good that you can find out the password this way.</p>

<p>To do this you need to already be root, so it&rsquo;s not a vulnerability or
anything. This just means that if your machine is already compromised,
it&rsquo;s really, really, compromised. Here&rsquo;s how it works:</p>

<p>I have a running ssh server on my machine, so I sshd to my laptop:</p>

<p><code>$ ssh asdf@localhost</code></p>

<p><code>sshd</code> forks and creates a couple of new processes to handle the
incoming ssh connection. I can find them using <code>ps</code>:</p>

<pre>
bork@kiwi /tmp> ps aux | grep sshd
root      1242  0.0  0.0  50036   908 ?        Ss   Jan21   0:00 /usr/sbin/sshd -D
root      <b>9412</b>  0.0  0.0 101536  4104 ?        Ss   11:29   0:00 sshd: unknown [priv]
sshd      9413  0.0  0.0  51468  1356 ?        S    11:29   0:00 sshd: unknown [net] 
</pre>

<p>Then I can use <code>strace</code> to spy on what the child process is doing. It
passes the password to the main <code>sshd</code> process, and that&rsquo;s where we
win!</p>

<p>I attach <code>strace</code> to the child process like this:</p>

<p><code>$ sudo strace -p 9412 2&gt; strace_out</code></p>

<p>and then go back to my <code>ssh</code> login and type in my password
(&lsquo;magicpassword&rsquo;).</p>

<p>When I look in the <code>strace_out</code> that gets created, I can see the
password!</p>

<pre>
read(6, "\v\0\0\0\r<b>magicpassword</b>", 18)  = 18
socket(PF_FILE, SOCK_DGRAM|SOCK_CLOEXEC, 0) = 4
connect(4, {sa_family=AF_FILE, path="/dev/log"}, 110) = 0
sendto(4, "<38>Feb 17 11:32:35 pam_fingerpr"..., 68, MSG_NOSIGNAL, NULL, 0) = 68
sendto(4, "<38>Feb 17 11:32:35 pam_fingerpr"..., 121, MSG_NOSIGNAL, NULL, 0) = 121
</pre>

<p>This is pretty nuts! When I think of the damage you can do as root, I
usually think of things like reading sensitive files. And when I wrote
a rootkit, I learned that you can do all kinds of crazy things by
inserting a malicious module into the kernel. (like hiding files and
processes and making every song on your computer be by Rick Astley)</p>

<p>But you can also spy on running processes and learn basically anything
you want around them! So if the NSA has root on your server, it can
easily find out everyone&rsquo;s password who logs in via SSH. Whoa.</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Understanding how killall works using strace]]></title>
    <link href="https://jvns.ca/blog/2013/12/22/fun-with-strace/"/>
    <updated>2013-12-22T00:00:00+00:00</updated>
    <id>https://jvns.ca/blog/2013/12/22/fun-with-strace/</id>
    <content type="html"><![CDATA[<p>Right now I&rsquo;m on a million-hour train ride from New York to Montreal.
So I&rsquo;m looking at the output of <code>strace</code> because, uh, <code>strace</code> is
cool, and it is teaching me some things about how the command line
tools I
use all the time work.</p>

<p>What <code>strace</code> does is capture every single system call that gets
called when executing a program. System calls are the interface
between userspace programs and the kernel, so looking at the output
from <code>strace</code> is a fun way to understand how Linux works, and what&rsquo;s
really involved in running a program.</p>

<p>For example! <code>killall</code>! I ran</p>

<p><code>strace killall ruby1.9.1 2&gt; killall-log</code>.</p>

<p>This starts with</p>

<pre><code>execve(&quot;/usr/bin/killall&quot;, [&quot;killall&quot;, &quot;ruby1.9.1&quot;], [/* 48 vars */]) = 0
</code></pre>

<p>Every time you run a program, <code>execve</code> gets called to start, so
<code>execve</code> will always be the first line.</p>

<p>Then this happens A WHOLE BUNCH OF TIMES:</p>

<pre><code>open(&quot;/proc/4526/stat&quot;, O_RDONLY)       = 3
fstat(3, {st_mode=S_IFREG|0444, st_size=0, ...}) = 0
mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7febbb269000
read(3, &quot;4526 (chrome) S 4521 2607 2607 0&quot;..., 1024) = 374
close(3)                                = 0
munmap(0x7febbb269000, 4096)            = 0
</code></pre>

<p>with different PIDs.</p>

<p>What&rsquo;s going on here is that it goes through every PID. To find the
PIDs, it opens the <code>/proc</code> directory. There&rsquo;s a directory in <code>/proc</code>
for each PID.</p>

<pre><code>bork@kiwi ~/w/homepage&gt; ls /proc
1      1495   2408   2780   3278  8065         fb
10006  1498   2409   2782   3281  8066         filesystems
10152  1500   2410   2795   3283  8068         fs
10158  1504   2411   28     3317  8069         interrupts
1021   1513   2412   2802   35    8070         iomem
</code></pre>

<p>The system call that does this is:</p>

<p><code>openat(AT_FDCWD, &quot;/proc&quot;, O_RDONLY|O_NONBLOCK|O_DIRECTORY|O_CLOEXEC) = 3</code></p>

<p>Once it&rsquo;s done that, then it iterates through all the PIDs, opens
<code>/proc/$PID/stat</code>, and checks to see if the process has the right
name. The kernel isn&rsquo;t involved in seeing whether or not the process
has the right name, so we don&rsquo;t see that in the <code>strace</code> output.</p>

<p>Once it finds a PID that it wants to kill, it runs something like</p>

<pre><code>kill(11510, SIGTERM)
</code></pre>

<p>to kill it. SIGTERM isn&rsquo;t a very serious killing-y signal &ndash; it&rsquo;s
signal 15, and processes can ignore it or save their state before they
stop. If you run <code>killall -9</code>, it will sent <code>SIGKILL</code> to all the
matching processes and it will kill them dead.</p>

<p>This is really neat! I never thought of <code>killall</code> as having to do an
exhaustive search through all PIDs before, but it makes sense.</p>

<p>After all of that, if there was something to kill, the only thing left
is <code>exit_group(0)</code>. <code>man 2 exit_group</code> tells me that this exits all
threads in a process, and that this system call is called at the end
.of every process</p>

<p>If we run <code>killall blah</code>, and there was no <code>&quot;blah&quot;</code> process to kill,
instead we see:</p>

<pre><code>write(2, &quot;blah: no process found\n&quot;, 23blah: no process found) = 23
exit_group(0) 
</code></pre>

<p>because it needs to write &ldquo;no process found&rdquo; to stderr.</p>

<p><strong>Edit:</strong></p>

<p>I have learned a couple of new things, from people&rsquo;s responses to this
post!</p>

<p>If you want to see the library calls instead of the system calls, and
want to see where it does the string comparisons, you can use
<code>ltrace</code>!</p>

<p>For <code>killall</code>, finding <code>python3</code> and killing it looks like:</p>

<pre><code>__asprintf_chk(0x7fff195b6988, 1, 0x403fd9, 15499, 0x7f31d919e700) = 16
fopen(&quot;/proc/15499/stat&quot;, &quot;r&quot;)              = 0x208f8f0
free(0x0208f8d0)                            = &lt;void&gt;
fscanf(0x208f8f0, 0x403fe7, 0x7fff195b71b0, 0x7f31d8fa5728, 0) = 1
fclose(0x208f8f0)                           = 0
strcmp(&quot;python3&quot;, &quot;python3&quot;)                = 0
kill(15499, 15)                             = 0
</code></pre>

<p>And you can attach <code>strace</code> or <code>ptrace</code> to an already-running process
to see what it&rsquo;s up to. <a href="https://twitter.com/zbrdge/">@zbrdge</a> said
that he sometimes uses it to see which files Apache is accessing
during a HTTP request.</p>
]]></content>
  </entry>
  
</feed>
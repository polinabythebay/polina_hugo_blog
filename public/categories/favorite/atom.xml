<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Julia Evans]]></title>
  <link href="http://jvns.ca/atom.xml" rel="self"/>
  <link href="https://jvns.ca/categories/favorite/atom/index.xml"/>
  <updated>0001-01-01T00:00:00+00:00</updated>
  <id>http://jvns.ca</id>
  <author>
    <name><![CDATA[Julia Evans]]></name>
  </author>
  <generator uri="http://gohugo.io/">Hugo</generator>

  
  <entry>
    <title type="html"><![CDATA[What happens when you start a process on Linux?]]></title>
    <link href="https://jvns.ca/blog/2016/10/04/exec-will-eat-your-brain/"/>
    <updated>2016-10-04T20:07:01+00:00</updated>
    <id>https://jvns.ca/blog/2016/10/04/exec-will-eat-your-brain/</id>
    <content type="html"><![CDATA[

<p>This is about how fork and exec works on Unix. You might already know about this, but some
people don&rsquo;t, and I was surprised when I learned it a few years back!</p>

<p>So. You want to start a process. We&rsquo;ve talked a lot about <strong>system calls</strong> on this blog &ndash; every time you start a process, or open a file, that&rsquo;s a system call. So you might think that there&rsquo;s a system call like this</p>

<pre><code>start_process([&quot;ls&quot;, &quot;-l&quot;, &quot;my_cool_directory&quot;])
</code></pre>

<p>This is a reasonable thing to think and apparently it&rsquo;s how it works in DOS/Windows. I was
going to say that this <em>isn&rsquo;t</em> how it works on Linux. But! I went and looked at the docs and apparently there is a <a href="http://man7.org/linux/man-pages/man3/posix_spawn.3.html">posix_spawn</a> system call that does basically this. Shows what I know. Anyway, we&rsquo;re not going to talk about that.</p>

<h3 id="fork-and-exec">fork and exec</h3>

<p><code>posix_spawn</code> on Linux is behind the scenes implemented in terms of 2 system calls called
<code>fork</code> and <code>exec</code> (actually <code>execve</code>), which are what people usually actually use anyway. On OS X apparently people use <code>posix_spawn</code> and fork/exec are discouraged! But we&rsquo;ll talk about Linux.</p>

<p>Every process in Linux lives in a &ldquo;process tree&rdquo;. You can see that tree by running
<code>pstree</code>. The root of the tree is <code>init</code>, with PID 1. Every process (except init) has a parent, and any process has many children.</p>

<p>So, let&rsquo;s say I want to start a process called <code>ls</code> to list a directory. Do I just have a
baby <code>ls</code>? No!</p>

<p>Instead of having children, what I do is you have a child that is a clone of myself, and then that child gets its brain eaten and turns into <code>ls</code>. Really.</p>

<p>We start out like this:</p>

<pre><code>my parent
    |- me
</code></pre>

<p>Then I run <code>fork()</code>. I have a child which is a clone of myself.</p>

<pre><code>my parent
    |- me
       |-- clone of me
</code></pre>

<p>Then I organize it so that my child runs <code>exec(&quot;ls&quot;)</code>. That leaves us with</p>

<pre><code>my parent
    |- me
       |-- ls
</code></pre>

<p>and once ls exits, I&rsquo;ll be all by myself again. Almost</p>

<pre><code>my parent
    |- me
       |-- ls (zombie)
</code></pre>

<p>At this point ls is actually a zombie process! That means it&rsquo;s dead, but it&rsquo;s waiting around for me in case I want to check on its return value (using the <code>wait</code> system call.) Once I get its return value, I will really be all alone again.</p>

<pre><code>my parent
    |- me
</code></pre>

<h3 id="what-fork-and-exec-looks-like-in-code">what fork and exec looks like in code</h3>

<p>This is one of the exercises you have to do if you&rsquo;re going to write a shell (which is a
very fun and instructive project! Kamal has a great workshop on Github about how to do it:
<a href="https://github.com/kamalmarhubi/shell-workshop">https://github.com/kamalmarhubi/shell-workshop</a>)</p>

<p>It turns out that with a bit of work &amp; some C or Python skills you can write a very
simple shell (like bash!) in C or Python in just a few hours (at least if you have someone sitting next to you who knows what they&rsquo;re doing, longer if not :)). I&rsquo;ve done this and it was awesome.</p>

<p>Anyway, here&rsquo;s what fork and exec look like in a program. I&rsquo;ve written fake C pseudocode. Remember that <a href="https://rachelbythebay.com/w/2014/08/19/fork/">fork can fail!</a></p>

<pre><code>int pid = fork();
// now i am split in two! augh!
// who am I? I could be either the child or the parent
if (pid == 0) {
    // ok I am the child process
    // ls will eat my brain and I'll be a totally different process 
    exec([&quot;ls&quot;])
} else if (pid == -1) {
    // omg fork failed this is a disaster 
} else {
    // ok i am the parent
    // continue my business being a cool program
    // I could wait for the child to finish if I want
}

</code></pre>

<h3 id="ok-what-does-it-mean-for-your-brain-to-be-eaten-julia">ok what does it mean for your brain to be eaten julia</h3>

<p>Processes have a lot of attributes!</p>

<p>You have</p>

<ul>
<li>open files (including open network connections)</li>
<li>environment variables</li>
<li>signal handlers (what happens when you run Ctrl+C on the program?)</li>
<li>a bunch of memory (your &ldquo;address space&rdquo;)</li>
<li>registers</li>
<li>an &ldquo;executable&rdquo; that you ran (/proc/$pid/exe)</li>
<li>cgroups and namespaces (&ldquo;linux container stuff&rdquo;)</li>
<li>a current working directory</li>
<li>the user your program is running as</li>
<li>some other stuff that I&rsquo;m forgetting</li>
</ul>

<p>When you run <code>execve</code> and have another program eat your brain, actually almost everything
stays the same! You have the same environment variables and signal handlers and open files and more.</p>

<p>The only thing that changes is, well, all of your memory and registers and the program that you&rsquo;re running. Which is a pretty big deal.</p>

<h3 id="why-is-fork-not-super-expensive-or-copy-on-write">why is fork not super expensive (or: copy on write)</h3>

<p>You might ask &ldquo;julia, what if I have a process that&rsquo;s using 2GB of memory! Does that mean every time I start a subprocess all that 2GB of memory gets copied?! That sounds expensive!&rdquo;</p>

<p>It turns out that Linux implements &ldquo;copy on write&rdquo; for fork() calls, so that for all the
2GB of memory in the new process it&rsquo;s just like &ldquo;look at the old process! it&rsquo;s the same!&rdquo;.
And then if the either process writes any memory, then at that point it&rsquo;ll start copying.
But if the memory is the same in both processes, there&rsquo;s no need to copy!</p>

<h3 id="why-you-might-care-about-all-this">why you might care about all this</h3>

<p>Okay, julia, this is cool trivia, but why does it matter? Do the details about which
signal handlers or environment variables get inherited or whatever actually make a
difference in my day-to-day programming?</p>

<p>Well, maybe! For example, there&rsquo;s this <a href="http://kamalmarhubi.com/blog/2015/06/30/my-favourite-bug-so-far-at-the-recurse-center/">delightful bug on Kamal&rsquo;s blog</a>. It talks about how Python sets the signal handler for SIGPIPE to ignore. So if you run a program from inside Python, by default it will ignore SIGPIPE! This means that the program will <strong>behave differently</strong> depending on whether you started it from a Python script or from your shell! And in this case it was causing a weird bug!</p>

<p>So, your program&rsquo;s environment (environment, signal handlers, etc.) can matter! It
inherits its environment from its parent process, whatever that was! This can sometimes be
a useful thing to know when debugging.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting things done]]></title>
    <link href="https://jvns.ca/blog/2016/09/19/getting-things-done/"/>
    <updated>2016-09-19T22:34:46+00:00</updated>
    <id>https://jvns.ca/blog/2016/09/19/getting-things-done/</id>
    <content type="html"><![CDATA[

<p>Ok, so this is kind of a feelings-y productivity-y post. So, to be clear &ndash;
this is not advice, even though it&rsquo;s phrased that way. This is just some stuff
that feels like it&rsquo;s working for me right now so I wanted to write it down. I
will go back to writing about strace again soon.</p>

<p>The premise is &ndash; I have a job. I work on a pretty small team, and so what I
personally get done is a pretty large part of what the team overall does. So
given that I work on a good team that helps me do things, what can I
personally do to be better at getting things done?</p>

<h3 id="have-a-vision-maybe-even-the-right-one">Have a vision (maybe even the right one)</h3>

<p>We talked about this in <a href="https://jvns.ca/blog/2016/08/16/how-do-you-work-on-something-important/">How do you decide what to do?</a>.</p>

<p>This is the &ldquo;can I explain what I’m doing to someone at a conference?&rdquo; test. When I can’t do this I find it really hard to get things done. This is because without a framework for what I’m doing (&ldquo;make our infrastructure cheaper to run! Make it easier to debug problems! Improve reliability by making it harder for humans to make mistakes! protect our customers from fraud&rdquo;), it’s really easy to get stuck in small day-to-day decisions about what direction to take.</p>

<p>I asked a coworker one time about how to have a vision if I wasn’t even sure what the Right Vision Was! He suggested just picking a vision that seemed mostly reasonable and then moving that way until I learned more. This was actually really helpful.</p>

<h3 id="focus-do-one-thing-at-a-time-maybe-two">Focus (do one thing at a time, maybe two)</h3>

<p>When I actually focus on a thing, I’m always amazed by how much I can get done. If I do more than about 2 things, then all of the things take forever to get finished.</p>

<p>I think &ldquo;focus on one thing&rdquo; is not good advice how higher-level people (like executives who need to keep track of a huge number of things going on in their organizations). But for me (an individual software engineer), it works best if I just pay attention to one or two things at a time.</p>

<h3 id="learn-how-to-break-things-down">Learn how to break things down</h3>

<p>I think this is how you get from &lsquo;vision&rsquo; to &lsquo;focus&rsquo; &ndash; you can’t actually execute on all the parts of your vision at the same time. I think I’m getting better at being like &ldquo;ok, I’m going to this Distant Container Island, I’m first going to go pick up some provisions in the Lagoon of Configuration Management&rdquo;.</p>

<p>This is a hard thing to do but I think I’ve gotten better at it over time.</p>

<h3 id="try-to-get-something-done-every-day">Try to get something done every day</h3>

<p>So, there are all these daily productivity hacks, like not checking Twitter
too often or only checking your email 3 times a day, or whatever. I don&rsquo;t know
about those. One reasonable heuristic for me is &ndash; if I’m doing an Important
Thing (&ldquo;do one thing at a time, maybe two!&rdquo;), then I should try to make at
least some progress on the Important Thing every day. If I do that, then I’m
definitely always getting stuff done.</p>

<h3 id="talk-to-someone-when-i-get-stuck">Talk to someone when I get stuck</h3>

<p>I get stuck sometimes! I’ve tried to stop feeling bad about telling someone when I’m stuck, and just go talk through whatever I’m working on with a person who usually helps me get unstuck (hi, Franklin). <a href="http://jvns.ca/blog/2014/06/13/asking-questions-is-a-superpower/">Asking questions is a superpower</a>.</p>

<h3 id="don-t-be-scared-of-small-problems">Don’t be scared of small problems</h3>

<p>I’ve noticed that when I work on things, there is usually a weird maze between the Start Point and the Thing Actually Being Done. The maze is full of unexpected problems and OH MY IS THAT HOW THAT SYSTEM WORKS OH GOODNESS OKAY. I can figure out some of the biggest problems in advance by writing a <a href="https://jvns.ca/blog/2016/06/03/learning-to-like-design-documents/">design document</a>, but there will always be surprises.</p>

<p>I used to get a lot more scared when something unexpected happened like OH NO WHAT IF MY PROJECT WILL FAIL EVERYTHING IS TERRIBLE. I’m trying to learn to be more optimistic and just think &ldquo;ok, well, something weird happened, there are always weird things, it will be fine&rdquo;. So far it&rsquo;s working.</p>

<h3 id="do-whatever-s-necessary">Do whatever’s necessary</h3>

<p>This one comes straight out of my company’s value system. Sometimes I need to edit code in a codebase that, say, belongs to another team. Just to do a small thing. I have occasionally tried to ask them to write the code for me. This works approximately 0% of the time and takes weeks. What DOES work and is pretty fast is to:</p>

<p>Talk to someone on the other team about whether what I want to do seems reasonable
Ask them to pair for 30 minutes with me to get me started
Finish writing the code myself</p>

<p>So it turns out to get things done I have to do a bunch of things that I do not know how to do and am not necessarily qualified to do. Usually I can just do these things and it is fine.</p>

<h3 id="have-deadlines">Have deadlines</h3>

<p>I’m still not sure if this is useful but &ndash; sometimes I find it super useful to have an arbitrary deadline for a task, especially a big one. Like &ldquo;You should be done with this in 6 weeks&rdquo;. I don’t want it to be like &ldquo;&hellip; or else you’ll be fired&rdquo;, but I think deadlines are helpful to see when something’s growing in scope uncontrollably or is taking a lot longer than you thought. Then maybe I can cut features!</p>

<h3 id="believe-in-yourself">Believe in yourself</h3>

<p>This is very feelings-y but it is pretty useful for me to believe that I can actually do the thing I’m setting out to do. That’s all. Often when I try to do a thing it turns out that I can do it, so this is basically reasonable.</p>

<h3 id="i-can-do-a-lot">I can do a lot!</h3>

<p>It turns out that I as a human can do a lot on my own! Like, outside of work I made <a href="https://jvns.ca/zines/">this zine</a>, and I think it’s been useful to a ton of people! I’m really happy with the outcome. All I really had to do was have a small vision (&ldquo;teach people how to debug their computers better&rdquo;) sit down and focus for a while on a few weekends, be willing to ship something that wasn’t perfect, and have a deadline (I wanted to hand them out at Strange Loop this year).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning systems programming with Rust]]></title>
    <link href="https://jvns.ca/blog/2016/09/11/rustconf-keynote/"/>
    <updated>2016-09-11T10:45:47+00:00</updated>
    <id>https://jvns.ca/blog/2016/09/11/rustconf-keynote/</id>
    <content type="html"><![CDATA[

<style>

.container {
    display: flex;
}
.slide {
    width: 40%;
}
.content {
    width: 60%;
    align-items: center;
    padding: 20px;
}

@media (max-width: 480px) { /*breakpoint*/
    .container {
        display: block;
    }
    .slide {
        width: 100%;
    }
    .content {
        width: 100%;
}

</style>

<p>I did the closing keynote at the first RustConf yesterday, on Rust and systems
programming and accessibility and learning about concurrency and why I write
about programming and a bunch of other things.</p>

<p>I was really delighted to be invited because I&rsquo;m a huge fan of the Rust
community. They&rsquo;re working incredibly hard to make a language that is
extremely powerful, but also easy to use, and there was a huge focus on
usability and good error messages. The talks were really ambitious, friendly,
and inclusive. Their challenge is &ldquo;Fast, safe, productive &ndash; pick three&rdquo; :).</p>

<p>Here&rsquo;s a video &amp; transcript of that talk (where when I say &ldquo;transcript&rdquo; I mean &ldquo;more
less what I said, kinda&rdquo;).</p>

<h3 id="video">video</h3>

<iframe width="560" height="315" src="https://www.youtube.com/embed/ftQfpAeyxPo" frameborder="0" allowfullscreen></iframe>

<h3 id="transcript">transcript</h3>

<p>You can click on any of the slides to see a big version.</p>

<p>I drew the slides with <a href="https://www.amazon.com/Samsung-Galaxy-9-7-Inch-Tablet-Titanium/dp/B00V49LQZ4">this Samsung tablet</a>, and Powerpoint for android. These were the easiest slides I&rsquo;ve ever made.</p>

<div class="container">
<div class="slide">
<a href="/images/rust-talk/slide_01.png"><img src="/images/rust-talk/slide_01_small.png"></a>
</div>
<div class="content">

</div>
</div>

<div class="container">
<div class="slide">
<a href="/images/rust-talk/slide_02.png"><img src="/images/rust-talk/slide_02_small.png"></a>
</div>
<div class="content">

These are the 4 themes I want to talk about in this talk! Let's go.

</div>
</div>

<div class="container">
<div class="slide">
<a href="/images/rust-talk/slide_03.png"><img src="/images/rust-talk/slide_03_small.png"></a>
</div>
<div class="content">

A lot of people love Rust for these 3 reasons. And more! memory safety without garbage collection! These are great reasons to love Rust.

</div>
</div>

<div class="container">
<div class="slide">
<a href="/images/rust-talk/slide_04.png"><img src="/images/rust-talk/slide_04_small.png"></a>
</div>
<div class="content">
But that's not why I love Rust. I'm kind of a beginner Rust programmer, my understanding of the borrow checker is flaky, I've written maybe 1000 lines of Rust code, and I'm not writing any production Rust code.

<br><br>
I spend a lot of my time on a comet very far away from Rust. So why am I talking to you right now?
</div>
</div>

<div class="container">
<div class="slide">
<a href="/images/rust-talk/slide_05.png"><img src="/images/rust-talk/slide_05_small.png"></a>
</div>
<div class="content">


I care a lot about learning about systems, and I've spent a lot of my time doing that. I love doing experiments with programming, and I think Rust is a super good platform for experiments. And the community has helped me out!

</div>
</div>

<div class="container">
<div class="slide">
<a href="/images/rust-talk/slide_06.png"><img src="/images/rust-talk/slide_06_small.png"></a>
</div>
<div class="content">

When Aaron invited me to give this talk (which was, like, the best day ever), he wrote

<p>
"We see the language as empowering for a wide variety of people who
might not otherwise consider themselves systems programmers."
</p>

And the person who doesn't consider themselves as a systems programmer! That has TOTALLY BEEN ME. So let's talk about experiments and empowement.

</div>
</div>

<div class="container">
<div class="slide">
<a href="/images/rust-talk/slide_07.png"><img src="/images/rust-talk/slide_07_small.png"></a>
</div>
<div class="content">

</div>
</div>

<div class="container">
<div class="slide">
<a href="/images/rust-talk/slide_08.png"><img src="/images/rust-talk/slide_08_small.png"></a>
</div>
<div class="content">

I do a lot of programming experiments to learn more about programming. My goal with these experiments usually isn't to produce anything of value. Instead I just want to learn something!

</div>
</div>

<div class="container">
<div class="slide">
<a href="/images/rust-talk/slide_09.png"><img src="/images/rust-talk/slide_09_small.png"></a>
</div>
<div class="content">

In 2013, I'd been working as a programmer for 2 years, I had 2 CS degrees, and I knew all kinds of things about computer science. But there was still SO MUCH I didn't know.

</div>
</div>

<div class="container">
<div class="slide">
<a href="/images/rust-talk/slide_10.png"><img src="/images/rust-talk/slide_10_small.png"></a>
</div>
<div class="content">

In particular, I didn't know anything really about how the Linux kernel worked, even though I'd been using Linux for 8 years. I think I'd never heard the words "system call".

</div>
</div>

<div class="container">
<div class="slide">
<a href="/images/rust-talk/slide_11.png"><img src="/images/rust-talk/slide_11_small.png"></a>
</div>
<div class="content">

<p>
</p>
So I went to the Recurse Center! RC is a 12-week programming retreat in New York where you go to learn whatever you want about programming. 

<p>
It's totally self-directed, and while I was there I ended up spending a lot of time learning about operating systems, because that was the most confusing thing I could find to work on.
</p>

</div>
</div>

<div class="container">
<div class="slide">
<a href="/images/rust-talk/slide_12.png"><img src="/images/rust-talk/slide_12_small.png"></a>
</div>
<div class="content">

On my <a href="http://jvns.ca/blog/2013/10/02/day-3-what-does-the-linux-kernel-even-do/">third day </a> at RC, I learned what the Linux kernel does! I found out what a system call is! 

<p>
It turns out it had a pretty simplex explanation -- your operating system knows how to do things like open files, you program does not, so your program asks your operating system to do things with system calls! Like `open`.
</p>

</div>
</div>

<div class="container">
<div class="slide">
<a href="/images/rust-talk/slide_13.png"><img src="/images/rust-talk/slide_13_small.png"></a>
</div>
<div class="content">

Three weeks before the end of my time there, I decided to write an operating system. Lindsey Kuper suggested I try Rust, which I was also a beginner at, so I tried that!

</div>
</div>

<div class="container">
<div class="slide">
<a href="/images/rust-talk/slide_14.png"><img src="/images/rust-talk/slide_14_small.png"></a>
</div>
<div class="content">
<p>
It turns out that writing an operating system in 3 weeks is actually impossible (at least for me!), so I reduced my scope a lot -- I decided to just write a keyboard driver from scratch. So my goal was, when I typed a key on my keyboard, that key would appear on my screen!
</p>
<p>
Turns out that this is not at all trivial.
</p>

</div>
</div>

<div class="container">
<div class="slide">
<a href="/images/rust-talk/slide_15.png"><img src="/images/rust-talk/slide_15_small.png"></a>
</div>
<div class="content">

<p>
So, one of the themes for this talk was "you can contribute without coding". I
really believe in this -- I think that code contributions are great, don't get
me wrong.
</p>

<p>
But I have basically never contributed code to an open source
project (even though I'm a programmer!) and I think I've contributed a lot to
open source communities.
</p>

</div>
</div>

<div class="container">
<div class="slide">
<a href="/images/rust-talk/slide_16.png"><img src="/images/rust-talk/slide_16_small.png"></a>
</div>
<div class="content">

<p>
When I started doing this I discovered a really surprising thing. At the time I was writing blog posts every day about what I'd learned that day.
</p>

<p>
And even though I was a beginner to both Rust and operating systems development, it turned out that some of these blog posts were really popular! People were learning from them!
</p>

<p>I wrote buzzfeed-style posts like "12 things I learned today about linkers", <a href="http://jvns.ca/blog/2013/12/04/day-37-how-a-keyboard-works/">After 5 days, my OS doesn't crash when I press a key</a>, <a href="http://jvns.ca/blog/2013/12/13/day-42-how-to-run-an-elf-executable-i-dont-know/">How to run a simple ELF executable, from scratch (I don't know)</a>, and a lot more.
</p>

<p>
So this is interesting, right! To teach people it turns out you don't have to be an expert at all. Maybe it's actually even better to be a beginner!
</p>

</div>
</div>

<div class="container">
<div class="slide">
<a href="/images/rust-talk/slide_17.png"><img src="/images/rust-talk/slide_17_small.png"></a>
</div>
<div class="content">

Niko made this comment "if it's not documented, it might as well not exist" in his keynote this morning. And I think this is really true. If there's an amazing program in the world, but you don't know about it.

</div>
</div>

<div class="container">
<div class="slide">
<a href="/images/rust-talk/slide_18.png"><img src="/images/rust-talk/slide_18_small.png"></a>
</div>
<div class="content">

<p>
My friend Maya jokes that I'm basically developer relations for strace.
</p>

<p>
This happened because in 2013, someone told me about strace, a program I love that traces system calls. And I was so shocked that I hadn't known about it before! So I started telling everyone.
</p>

<p>
And now all kinds of people know about strace because of me, and they have a new useful tool! So that basically makes me the inventor of strace for those people, right? :)
</p>

<p>
I like doing this in my spare time because I write code at work, so it's a really nice change of pace.
</p>
</div>
</div>

<div class="container">
<div class="slide">
<a href="/images/rust-talk/slide_19.png"><img src="/images/rust-talk/slide_19_small.png"></a>
</div>
<div class="content">

<p>
Writing code is a lot of work. And when you write the code, if you want people to use it, it's a lot of work to tell people about it!
</p>

<p>
So I like to skip the whole first step of writing code, and just tell people about awesome things that already exist. I'm like the most productive software developer ever.
</p>
</div>
</div>

<div class="container">
<div class="slide">
<a href="/images/rust-talk/slide_21.png"><img src="/images/rust-talk/slide_21_small.png"></a>
</div>
<div class="content">

<p>
Let's switch gears and talk about learning systems programming.
</p>
<p>
My coworker asked me the other day "I'm reading a book about Rust, what would be a good example program to write?". And this is a hard question to answer!
</p>
<p>
So here's a possible answer to that question. I think it's important to have a lot of answers like this, because there's so much to learn!
</p>
</div>
</div>

<div class="container">
<div class="slide">
<a href="/images/rust-talk/slide_22.png"><img src="/images/rust-talk/slide_22_small.png"></a>
</div>
<div class="content">

<p>
So one evening, I was at home, and I wanted to know more about concurrency.
</p>
</div>
</div>

<div class="container">
<div class="slide">
<a href="/images/rust-talk/slide_23.png"><img src="/images/rust-talk/slide_23_small.png"></a>
</div>
<div class="content">

<p>
But this isn't a very specific question! A better question is -- what are the systems primitives for concurrency?
</p>
<p>
I knew that a lot of concurrent programs used the same kind of functions and ideas and systems calls. So what were those things, and how did they work?
</p>
<p>
Many concurrent programs use operating systems threads, they need to control access to resources with mutexes, and sometimes they do these "atomic instruction" things.
</p>

</div>
</div>

<div class="container">
<div class="slide">
<a href="/images/rust-talk/slide_24.png"><img src="/images/rust-talk/slide_24_small.png"></a>
</div>
<div class="content">
<p>
My favorite way to start out exploring idea is to write a program that doesn't work.
</p>

<p>
It's easy to write unsafe programs in C, so I did it in C. I made 1000 threads that each incremented the same counter 1000 times. You should get 100000 at the end, right?
</p>

</div>
</div>

<div class="container">
<div class="slide">
<a href="/images/rust-talk/slide_25.png"><img src="/images/rust-talk/slide_25_small.png"></a>
</div>
<div class="content">
<p>
Nope! Instead we get a data race! The answer is way less than a million. This is great! I was very happy already because I'd made a race and it worked. 
</p>

</div>
</div>

<div class="container">
<div class="slide">
<a href="/images/rust-talk/slide_26.png"><img src="/images/rust-talk/slide_26_small.png"></a>
</div>
<div class="content">
<p>
So one of the first ways to work on concurrency is mutexes, or locks. You and all the other threads have one place where you go to control who's allowed to update the counter.
</p>
<p>
I like this as a simple example because you can just get it to work and move on, or, if you want, you can go a lot deeper.
</p>
<p>
For example! To use mutexes, underneath you often use a function called pthread_mutex_lock. And it turns out that sometimes that uses the futex system call, and sometimes it doesn't! So there's all kinds of hidden complexity.
</p>

</div>
</div>

<div class="container">
<div class="slide">
<a href="/images/rust-talk/slide_27.png"><img src="/images/rust-talk/slide_27_small.png"></a>
</div>
<div class="content">
<p>
The next thing I want to talk about is atomic instructions. Basically your CPU knows how to increment counters without races -- if you say "lock inc" then it will make sure that the counter gets incremented exactly once.
</p>

</div>
</div>

<div class="container">
<div class="slide">
<a href="/images/rust-talk/slide_28.png"><img src="/images/rust-talk/slide_28_small.png"></a>
</div>
<div class="content">
<p>
So now we have a nice small exercise! This is not really that hard to do in Rust, but it introduces a lot of new ideas.
</p>
<p>
And there are a lot of opportunities for questions, right? Like, are mutexes or atomics faster? How much? Why? I love problems that you can finish pretty easily, but take farther if you want.
</p>

</div>
</div>

<div class="container">
<div class="slide">
<a href="/images/rust-talk/slide_29.png"><img src="/images/rust-talk/slide_29_small.png"></a>
</div>
<div class="content">
<p>
Now we're onto the last part of the talk.
</p>
<p>
I originally wrote "impossible problems" here. But of course all programs are technically *possible* to write!
</p>
<p>
As we're going to learn shortly, though, right now I really do not know C, and I have a day job, and so my free time for programming is not unlimited. So even if a program is *possible* for me to write, if I have to write it in C/C++, probably in practice it's not going to happen.
</p>
<p>
I'm going to tell you about how Rust helped me write a program that I wanted to write, that would have been improbable otherwise.
</p>

</div>
</div>

<div class="container">
<div class="slide">
<a href="/images/rust-talk/slide_30.png"><img src="/images/rust-talk/slide_30_small.png"></a>
</div>
<div class="content">
<p>
This where we get back to EMPOWERMENT.
</p>
</div>
</div>

<div class="container">
<div class="slide">
<a href="/images/rust-talk/slide_31.png"><img src="/images/rust-talk/slide_31_small.png"></a>
</div>
<div class="content">

<p>
So, here's the problem I was mad about. I'd run "top" on my computer, and it would tell me Ruby was using all the CPU, and I wouldn't know why.
</p>
</div>
</div>

<div class="container">
<div class="slide">
<a href="/images/rust-talk/slide_32.png"><img src="/images/rust-talk/slide_32_small.png"></a>
</div>
<div class="content">
<p>
And the reason this made me mad, is that I could see what other programs like Chrome were doing with  <a href="http://jvns.ca/blog/2016/02/24/perf-top-my-new-best-friend/">perf top</a>
</p>
<p>
(cool demo of perf top goes here)
</p>

</div>
</div>

<div class="container">
<div class="slide">
<a href="/images/rust-talk/slide_33.png"><img src="/images/rust-talk/slide_33_small.png"></a>
</div>
<div class="content">
<p>
So I wanted to write a program that I could just give the PID of a Ruby process, and it would tell me the top Ruby functions that were running right now.
</p>
<p>
Is that possible? My friend Julian claimed this was totally possible and easy. So eventually I decided to try.
</p>

</div>
</div>

<div class="container">
<div class="slide">
<a href="/images/rust-talk/slide_34.png"><img src="/images/rust-talk/slide_34_small.png"></a>
</div>
<div class="content">
<p>
To do this from the outside, you have to basically spy on the internals of a running Ruby process.
</p>
<p>
The system call I used to spy is called process_vm_readv.
</p>

</div>
</div>

<div class="container">
<div class="slide">
<a href="/images/rust-talk/slide_35.png"><img src="/images/rust-talk/slide_35_small.png"></a>
</div>
<div class="content">
<p>
In the Ruby interpreter, you have the C stack. That has unhelpful things on it like "you're in vm_exec right now" which basically means "you're running a Ruby function"
</p>
<p>
BUT WHICH RUBY FUNCTION?!
</p>
<p>
But somewhere inside its memory, somewhere, you have the Ruby stack. That's what I wanted to get at.
</p>

</div>
</div>

<div class="container">
<div class="slide">
<a href="/images/rust-talk/slide_36.png"><img src="/images/rust-talk/slide_36_small.png"></a>
</div>
<div class="content">
<p>
I'm not going to go into the details of how this works because I don't have time, but I wrote a C demo of this program. I know how to write C! I can allocate memory in C! My demo kinda worked!
</p>
<p>
However, I do not really know how to *free* memory in C. Like, I technically know that there is a free function, but I don't have a lot of experience with it. So my program had some pretty serious memory issues almost right away.
</p>

</div>
</div>

<div class="container">
<div class="slide">
<a href="/images/rust-talk/slide_37.png"><img src="/images/rust-talk/slide_37_small.png"></a>
</div>
<div class="content">
<p>
At this point I asked my partner Kamal for some help translating my program to Rust.
</p>
<p>
At the time I used bindgen and it was awesome, it took maybe a day, and now I had a Rust program that did the same thing! Except I didn't have to know how to free memory anymore.
</p>

</div>
</div>

<div class="container">
<div class="slide">
<a href="/images/rust-talk/slide_38.png"><img src="/images/rust-talk/slide_38_small.png"></a>
</div>
<div class="content">
<p>
If you observe this highly scientific graph of "program workingness", you will see that my productivity went up.
</p>
<p>
I had to fight with the compiler a lot more, but I did not have to learn how to implement hashmaps from scratch. Win.
</p>

</div>
</div>

<div class="container">
<div class="slide">
<a href="/images/rust-talk/slide_39.png"><img src="/images/rust-talk/slide_39_small.png"></a>
</div>
<div class="content">
<p>
But I had one more problem. It turned out that I needed to know what the bytes in memory in my Ruby program *meant*. I wanted to know what the original struct definitions were so I could interpret all these 0s and 1s.
</p>
<p>
</p>

</div>
</div>

<div class="container">
<div class="slide">
<a href="/images/rust-talk/slide_40.png"><img src="/images/rust-talk/slide_40_small.png"></a>
</div>
<div class="content">
<p>
Luckily, sometimes the C compiler will save a bunch of debug information in a format called DWARF.
</p>
<p>
This basically has all the structs and saves them inside your programs! Yay! This is the best! I had hope again.
</p>

</div>
</div>

<div class="container">
<div class="slide">
<a href="/images/rust-talk/slide_41.png"><img src="/images/rust-talk/slide_41_small.png"></a>
</div>
<div class="content">
<p>
I needed a library for parsing DWARF, though. I started with trying libdwarf, and I got it maybe 90% working. But it was sort of a terrible experience.
</p>
<p>
The API was terrible, there were no docs that I could find, it was slow, I had a bad time linking the library into my Rust program.
</p>
<p>
One of the most upsetting things to me about this library is that it was really hard to understand how DWARF actually worked by looking at the interfaces it provided. I like knowing how things work.
</p>
</div>
</div>

<div class="container">
<div class="slide">
<a href="/images/rust-talk/slide_42.png"><img src="/images/rust-talk/slide_42_small.png"></a>
</div>
<div class="content">
<p>
A lot of the time when I have programming problems, I complain about them on Twitter. Somebody suggested I try a Rust library called 'gimli'.
</p>
<p>
One of the maintainers, Nick Fitzgerald, told me it wasn't done but he thought it might have all the features I needed! GREAT.
</p>

</div>
</div>

<div class="container">
<div class="slide">
<a href="/images/rust-talk/slide_43.png"><img src="/images/rust-talk/slide_43_small.png"></a>
</div>
<div class="content">
<p>
Using Gimli was a way better experience. It didn't have too much documentation either, but that was okay -- the example program they provided was really helpful, and explained how to do basically everything I needed to do.
</p>
<p>
The only thing it didn't do that I wanted was really small, and I submitted a tiny pull request to get it.
</p>
<p>
And the maintainers were really helpful! I understood DWARF better after I started working with Gimli.
</p>

</div>
</div>

<div class="container">
<div class="slide">
<a href="/images/rust-talk/slide_44.png"><img src="/images/rust-talk/slide_44_small.png"></a>
</div>
<div class="content">
<p>
"How does DWARF work" is a question pretty far out of the scope of this talk, but basically if your program is a train car (made of a bunch of ELF section), DWARF debug info is basically just a bunch of extra train cars tacked on to the end. One of the sections just basically has all the strings in your program concatenated together!
</p>
<p>
</p>

</div>
</div>

<div class="container">
<div class="slide">
<a href="/images/rust-talk/slide_45.png"><img src="/images/rust-talk/slide_45_small.png"></a>
</div>
<div class="content">
<p>
So, after this whole saga, we did it!! I worked on this a lot with Kamal and our ruby stacktrace program worked! It's <a href="https://github.com/jvns/ruby-stacktrace">on github</a> and everything. It works on 3 computers.
</p>
<p>
(insert cool demo here)
</p>

</div>
</div>

<div class="container">
<div class="slide">
<a href="/images/rust-talk/slide_46.png"><img src="/images/rust-talk/slide_46_small.png"></a>
</div>
<div class="content">
<p>
I spend a lot of time being frustrated with the Rust compiler, but I still like it because it lets me do things I probably wouldn't get done otherwise.
</p>

</div>
</div>

<div class="container">
<div class="slide">
<a href="/images/rust-talk/slide_47.png"><img src="/images/rust-talk/slide_47_small.png"></a>
</div>
<div class="content">
<p>
I want to leave you with a few things.
</p>
<p>
One delightful thing about systems is that there's always SO MUCH MORE TO LEARN. I don't think there's any danger of any of knowing everything about systems programming any time soon.
</p>

</div>
</div>

<div class="container">
<div class="slide">
<a href="/images/rust-talk/slide_48.png"><img src="/images/rust-talk/slide_48_small.png"></a>
</div>
<div class="content">
<p>
I'm pretty sure all of you know cool things about programming that I don't know. If you like writing, this can be a great way to make the community around you know more!
</p>

</div>
</div>

<div class="container">
<div class="slide">
<a href="/images/rust-talk/slide_49.png"><img src="/images/rust-talk/slide_49_small.png"></a>
</div>
<div class="content">
<p>
One thing I really want to emphasize is -- I see a ton of resources for beginners, and I think those are really awesome.
</p>
<p>
What I don't see as much of as I'd like is resources for people who know how to program, or know Rust, and really want to take their skills to the next level. I think the Rust community is really well placed to help people do this.
</p>
<p>
Writing down information like this for developers who might already have 5 or 10 years of experiences is where I spend almost all my time.
</p>

</div>
</div>

<div class="container">
<div class="slide">
<a href="/images/rust-talk/slide_50.png"><img src="/images/rust-talk/slide_50_small.png"></a>
</div>
<div class="content">
<p>
And while you're writing down cool things to help people level up -- remember that a lot of systems things aren't really that hard. People can learn harder things than you think they can if you explain it in a way that makes sense.
</p>
<p>
I think computer networking is a really good example of this -- a lot of people get really intimidated by networking, but a lot of the core concepts like IP addresses and ports and packets are not really that hard, and once you understand them you can learn a lot.
</p>
<p>
I wrote a zine called "linux debugging tools you'll love" that talks about ngrep, tcpdump, strace, etc. And somebody tweeted at me saying he was using it to teach his 8 year old! What? So I'm not totally sure I believe that the 8 year old is using tcpdump. But maybe I'm wrong!! Who am I to say that?
</p>

<p>
So I've discovered that the audience for clear writing about systems programming is huge. A lot bigger than you might think.
</p>
</div>
</div>

<div class="container">
<div class="slide">
<a href="/images/rust-talk/slide_51.png"><img src="/images/rust-talk/slide_51_small.png"></a>
</div>
<div class="content">
(the <a href="http://jvns.ca/zines">zine</a> I wrote)
</div>
</div>

<div class="container">
<div class="slide">
<a href="/images/rust-talk/slide_52.png"><img src="/images/rust-talk/slide_52_small.png"></a>
</div>
<div class="content">
<p>
I'm really happy about the Rust community because there are a ton of people in this room who know about Linux and networking and concurrency and all these topics that have historically been really hard to learn about.
</p>
<p>
But now many of you are gathered here inside this really welcoming and wonderful community! This feels magical to me and like it's going to be a really good thing for programming as a whole.
</p>

</div>
</div>

<div class="container">
<div class="slide">
<a href="/images/rust-talk/slide_53.png"><img src="/images/rust-talk/slide_53_small.png"></a>
</div>
<div class="content">
<p>
So, to close, for real, I'm excited for this to be a place where people can walk in asking "what's a system call?"
</p>

</div>
</div>

<div class="container">
<div class="slide">
<a href="/images/rust-talk/slide_54.png"><img src="/images/rust-talk/slide_54_small.png"></a>
</div>
<div class="content">
<p>
and wake up a year later knowing how to do systems programming, and thinking it wasn't really that hard.
</p>

</div>
</div>

<div class="container">
<div class="slide">
<a href="/images/rust-talk/slide_55.png"><img src="/images/rust-talk/slide_55_small.png"></a>
</div>
<div class="content">
<p>
this is a picture I commissioned of myself at the san franscisco zine festival from <a href="https://twitter.com/ohmaipie">@ohmaipie</a> as a wizard.
</p>
</div>
</div>

<div class="container">
<div class="slide">
<a href="/images/rust-talk/slide_56.png"><img src="/images/rust-talk/slide_56_small.png"></a>
</div>
<div class="content">
♥♥♥
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How do you decide what to work on?]]></title>
    <link href="https://jvns.ca/blog/2016/08/16/how-do-you-work-on-something-important/"/>
    <updated>2016-08-16T19:39:11+00:00</updated>
    <id>https://jvns.ca/blog/2016/08/16/how-do-you-work-on-something-important/</id>
    <content type="html"><![CDATA[

<p>So, I work as a programmer. Until pretty recently I was working on
machine learning, which is really fun and interesting. One thing I like
about machine learning is &ndash; it&rsquo;s important (and fun!) to actually spend
time with your data manually and understand it and look at individual
things.</p>

<p>But, ultimately, they did not hire me to do manual work! One week I remember
thinking &ldquo;right, my job is to build systems that accurately classify millions
of things, not to look at those things manually.&rdquo;</p>

<p>So the reason programmers sometimes get paid a lot of money, I think, is
because we can build systems that leverage computers to do an
unreasonable amount of work. If you build Gmail&rsquo;s spam system, you can
remove spam from the inboxes of millions of people! This is kind of
magical and amazing and it&rsquo;s worth all of the bugs and dealing with
computers.</p>

<p>But it takes a long time! Basically anything interesting that I work on
takes, let&rsquo;s say, 2-6 months. And it&rsquo;s not too weird to work on projects
that take even longer! One of my friends worked on the same
thing for more than a year. And at the end he&rsquo;d built a <a href="https://medium.com/transit-app/transit-maps-apple-vs-google-vs-us-cb3d7cd2c362#.mt80iagen">system for drawing transit maps that&rsquo;s better than
Google&rsquo;s</a>. This was really cool.</p>

<p>So this means you can really only do a few things. And if one of those things
doesn&rsquo;t work out then that means that like a quarter of your work for the year
is gone. This is okay, but it means it&rsquo;s worth being thoughtful.</p>

<p>And the more time I spend programming, the more time I see that it&rsquo;s actually
super hard to figure out what would be important to work on. Like, sure, I can
make a computer do a billion things (literally! That’s pretty easy!), but
<em>which billion things exactly</em>? What will have a lot of impact? What will help
my company do better?</p>

<p>Once, a little while after I started at my current job,
I told my manager &ldquo;hey, I&rsquo;m thinking of doing $thing&rdquo;. He said &ldquo;ok, what if
you do $other_thing instead?&rdquo; So I built the first version of the thing he
suggested (a small system for making it easier to keep track of your machine
learning experiments), and two years later it&rsquo;s something that the team still
uses and that a bunch of other people have built on top of. It turns out that
it was a good idea!</p>

<p>When I started programming, I thought that people would tell me what code to
write, and then I would write that code, and then that would be all. That is
not how it&rsquo;s been, even though certainly I get guidance along the way. I work
for a place that gives its engineers a lot of autonomy.</p>

<p>So instead, for me, it’s been more like:</p>

<ul>
<li>well we have this one long-term goal, or three, or six</li>
<li>also a bunch of minor problems of varying urgency</li>
<li>now it&rsquo;s up to you to figure out which ones would be good to solve
right now</li>
<li>also you have to figure out how to solve them</li>
<li>also the problems might be impossible to solve</li>
<li>and there are all these other external factors</li>
<li>you get to talk to a bunch of people who have thought about these
problems for a while to do it though!</li>
<li>here&rsquo;s 40 hours a week. go.</li>
</ul>

<h3 id="know-what-your-goals-are">know what your goals are</h3>

<p>So, how do you decide what to <strong>do</strong>?</p>

<p>I have a coworker Cory Watson who gave this cool talk at Monitorama
called <a href="http://onemogin.com/observability/stripe/culture/monitoring/monitorama/creating-a-culture-of-observability.html">Creating a Culture of Observability</a>.</p>

<p>He describes what he&rsquo;s doing as follows on that page:</p>

<blockquote>
<p>In other words, if our sensors — think about metrics, logs and traces —
are good, then we can learn about how effectively our systems are
working!</p>

<p>My job at Stripe is to make this fucking awesome.</p>
</blockquote>

<p>It is kind of obvious when working with Cory that he is relentlessly focused
on making it easier to know what our software systems are doing. And it helps!
The company&rsquo;s dashboards and metrics have gotten way better as a result. It’s
easier to make performance improvements and detect and understand errors.</p>

<p>My friend Anton who made that transit maps app, cares SO MUCH about how to
represent public transit information and he thinks about it all the time so
it’s not that surprising to me that he’s built an awesome way to do it.</p>

<p>I think this kind of focus is incredibly helpful &ndash; when I don&rsquo;t have a clear
goal, I find it really really hard to get things done or decide what to do. I
think of this as kind of the &ldquo;can I explain my job to someone at a party?&rdquo;
test. When I can&rsquo;t pass this test (especially if the person at the party is a
software engineer) I feel uncomfortable.</p>

<p>Obviously you don&rsquo;t need to always focus on the same thing (jeff dean is
like a legend at Google or something and I think he&rsquo;s done a ton of
different thing), but having a focus seems really important.</p>

<h3 id="coming-up-with-a-focus-is-not-that-easy">coming up with a focus is not that easy</h3>

<p>At work there are a lot of possible things to think about! And as a single
person (not a manager), there’s only so much you can focus on at a time. Some
things I see people working on:</p>

<ul>
<li>Our storage systems are super-reliable and easy to use</li>
<li>It’s easy to tell what your code is doing, in real time</li>
<li>Make the development experience really good and easy</li>
<li>Make the dashboard an awesome place for our users to understand their business</li>
</ul>

<p>So somehow I need to find a thing that is big enough and important enough to
focus on (can i explain to my colleagues why i’m doing what i’m doing?), but
also small enough that a single person (or small group) can make progress on
it. And then it is way easier to write code towards that vision!</p>

<h3 id="there-s-no-one-right-thing">there’s no one “right thing”</h3>

<p>I originally called this post “how do you work on the right thing?” I retitled
it because I think that that’s a wrong (and kind of dangerous) wording &ndash;
there is no one right thing to work on. I work with many many excellent people
who are working on many many important things. Not all things are equally
impactful (which is what this post is all about!), but it’s about reliably
finding useful things to work on that are within your capabilities, not
finding a global optimum.</p>

<p>If I only wrote globally optimal blog posts I would literally never publish
anything.</p>

<h3 id="believe-it-s-possible">believe it&rsquo;s possible</h3>

<p>One thing about working on long-term or ambitious projects is &ndash; you <strong>have</strong>
to believe that you can do the project. If you start a cool year-long project,
approximately 50 million things will go wrong along the way. Things you didn&rsquo;t
expect to break will break. And if you give up when you have a bad week or
three weeks or somebody doesn’t believe that what you’re doing is right, you
will never finish.</p>

<p>I think this is a really important thing a mentor / more senior person
can do for someone more junior. A lot of the time you can&rsquo;t
tell what&rsquo;s possible and what&rsquo;s impossible and what obstacles are fine and
what obstacles are insurmountable. But this can be
bootstrapped! If someone tells you &ldquo;don&rsquo;t worry, it&rsquo;ll all work out!&rdquo;,
then you can start, and hit the problems, and ask for advice, and keep
going, and emerge victorious.</p>

<p>And once you have emerged victorious enough times (and failed enough
times!), you can start to get a sense for which things will work and
which things will not work, and decide where to persevere.</p>

<p>People talk a lot about ‘agile’ and MVPs but I don’t think that’s a complete
answer here &ndash; sometimes you need to build a big thing, and you can write
design docs and prototypes, but ultimately you need to decide that damnit,
it’s going to work, and commit to spending a long time building it and showing
intermediate progress when you can.</p>

<p>Also your organization needs to support you in your work &ndash; it&rsquo;s very hard to
get anything done if the people around you don&rsquo;t believe that you can get it
done.</p>

<h3 id="i-m-not-in-undergrad-anymore">I’m not in undergrad anymore</h3>

<p>I <em>loved</em> being a math/CS undergrad. My professors would give me a series of
challenging assignments which were hard but always within my abilities. I
improved gradually over time! It was so fun! I was awesome at it! But it is
over.</p>

<p>Being employed is more like &ndash; I have a series of tasks which range from
totally trivial to I-don’t-even-know-where-to-start and I need to figure out
how to interrogate people and build up my skills so that I can do the hard
things. And I need to decide what “good enough” means for the things I do
decide to do, and nobody will do it for me, not really. There’s an interesting
comment by Rebecca Frankel that Dan Luu pointed me to, on
<a href="http://steve-yegge.blogspot.ca/2008/06/done-and-gets-things-smart.html">this post</a></p>

<blockquote>
<p>I agree with Steve Yegge&rsquo;s assertion that there are an enormously important
(small) group of people who are just on another level, and ordinary smart
hardworking people just aren&rsquo;t the same. Here&rsquo;s another way to explain why
there should be a quantum jump &ndash; perhaps I&rsquo;ve been using this discussion to
build up this idea: it’s the difference between people who are still trying
to do well on a test administered by someone else, and the people who have
found in themselves the ability to grade their own test, more carefully,
with more obsessive perfectionism, than anyone else could possibly impose on
them.</p>
</blockquote>

<p>So somehow working on an important thing and doing it well means you have to
decide what your goals are and also build your own internal standards for
whether or not you’ve met them. And other people can help you get started with
that, but ultimately it’s up to you.</p>

<h3 id="some-disconnected-thoughts-that-feel-useful">some disconnected thoughts that feel useful</h3>

<ul>
<li>Maggie talked about &ldquo;postmortem-driven development&rdquo; &ndash; look at things that have broken several times! see if you can help them not break again!</li>
<li>It&rsquo;s normal (and important!!) to do experiments that fail. Maybe the trick is to timebox those experiments and recognize when you&rsquo;re doing something risky / new.</li>
</ul>

<h3 id="i-don-t-know">I don&rsquo;t know!</h3>

<p>I feel weird admitting that I really struggle with this, but I really struggle
with this. I do not always have good ideas about what to build. Sometimes I
have ideas that I think are good and I do them and they’re great, and
sometimes I have ideas and I do them and they’re… really not great. Sometimes
I have standards for my work that I cannot figure out how to meet and that’s
really frustrating.</p>

<p>Sometimes other people have ideas and I think they’re great and help build
those ideas and it’s amazing. That’s a really good feeling. So far the best
things I’ve worked on have been other people’s ideas that I got excited about.</p>

<p>Sometimes other people have ideas and I don’t understand what they’re talking
about for months until they build it and I’m like OH THAT IS REALLY COOL WOW
WOW WOW. Even reliably recognizing good ideas is hard!</p>

<p>Some links:</p>

<ul>
<li><a href="http://mcfunley.com/data-driven-products-now">Data-Driven Products Now!</a> is a talk by Dan McKinley about how to think about building consumer-facing web products.</li>
<li><a href="http://www.theeffectiveengineer.com/blog/secret-to-growing-software-engineering-career">The Secret to Growing Your Engineering Career If You Don’t Want to Manage</a> (thanks to Emil Sit)</li>
<li><a href="http://www.theeffectiveengineer.com/blog/high-leverage-work-isnt-always-deep">The Highest-Leverage Activities Aren’t Always Deep Work</a></li>
</ul>

<p><small>
Thanks to Emil Sit, Camille Fournier, Kyle Kingsbury, Laura Lindzey, Lindsey Kuper, Stephen Tu, Dan Luu,
Maggie Zhou, Sunah Suh, Julia Hansbrough, and others for their comments on this.
</small></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux debugging tools I love]]></title>
    <link href="https://jvns.ca/blog/2016/07/03/debugging-tools-i-love/"/>
    <updated>2016-07-03T15:32:25+00:00</updated>
    <id>https://jvns.ca/blog/2016/07/03/debugging-tools-i-love/</id>
    <content type="html"><![CDATA[

<p>I gave a talk this weekend about debugging tools I love (here are <a href="https://speakerdeck.com/jvns/systems-programming-is-for-everyone">the slides</a>, such as they are). I think of these tools like a swiss army knife &ndash; if something on your system is wrong or slow, in any programming language, knowing how to use them can really help you out. I&rsquo;ve written pretty extensively on this, but I didn&rsquo;t have a central list to refer to. So! Here&rsquo;s the list of my current favorite tools. There are only 5! I&rsquo;ve used all of them (except opensnoop) to debug actual problems.</p>

<p>tcpdump and wireshark and opensnoop are also things that you can have on OS X.</p>

<h3 id="strace">strace</h3>

<p>A tool that traces system calls. My favorite thing. I have a bunch of posts with examples of how to use it on this blog. If you want to read what I think of it you should read the fanzine reference that you can read <a href="/blog/2015/04/15/strace-zine/">here</a>.</p>

<p>strace is pretty broadly useful, but keep in mind it can really slow down your programs.</p>

<p>I would be remiss if I did not mention the even-more-awesome dtrace. Colin Jones has a <a href="https://blog.8thlight.com/colin-jones/archive.html">nice introduction</a>.</p>

<h3 id="dstat">dstat</h3>

<p>A really simple tool that prints out how much data got sent over the network / written to disk every second. This is great when you suspect something is going on with network/disk usage and want to see what&rsquo;s happening in real time.</p>

<p>There&rsquo;s also iostat and netstat and atop and a bunch of other tools, but dstat is my favorite.</p>

<h3 id="tcpdump-wireshark">tcpdump + wireshark</h3>

<p>For spying on network traffic. I wrote an introduction explaining how to use them in <a href="/blog/2016/03/17/tcpdump-is-amazing/">tcpdump is amazing</a>.</p>

<p>When using these, it really helps to have a basic understanding of how networking works. Luckily the basics (&ldquo;what&rsquo;s the difference between IP and TCP and HTTP? what&rsquo;s a network packet?&rdquo;) are totally possible to pick up :D.</p>

<h3 id="perf">perf</h3>

<p>Have a C program and want to know which functions it&rsquo;s spending the most time in? <code>perf</code> is a sampling profiler for Linux that can tell you that.</p>

<p><code>perf top</code> gives you a live view of which functions are running right now, just like <code>top</code>. I like to use <code>perf top</code> no matter what language my programs are written in, just to see if I can understand anything from it. Sometimes it works!</p>

<p>node.js has built-in support for using perf to show you which Node function is running right now. You can also get this for JVM programs with perf-map-agent.</p>

<p>Brendan Gregg&rsquo;s website has the best <a href="http://www.brendangregg.com/perf.html">introduction to perf</a> I know.</p>

<p>You can use perf to generate amazing <a href="http://www.brendangregg.com/flamegraphs.html">flame graphs</a> like this:</p>

<p><img src="http://jvns.ca/images/flamegraph.svg"></p>

<h3 id="opensnoop">opensnoop</h3>

<p>Opensnoop is a new script that you can get as of Ubuntu 16.04. It&rsquo;s a delightfully simple tool &ndash; it just shows you which files are being opened right now on your computer. And it&rsquo;s fast, unlike strace!</p>

<p>opensnoop also exists on OS X and does basically the same thing.</p>

<p>Go to the <a href="https://github.com/iovisor/bcc">iovisor/bcc</a> repo on github for installation instructions. It works using eBPF, which is a new thing that I will not explain yet here but Brendan Gregg has been writing about enthusiastically for some time. You don&rsquo;t need to know how it works to use it, though :).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why do we use the Linux kernel&#39;s TCP stack?]]></title>
    <link href="https://jvns.ca/blog/2016/06/30/why-do-we-use-the-linux-kernels-tcp-stack/"/>
    <updated>2016-06-30T23:54:45+00:00</updated>
    <id>https://jvns.ca/blog/2016/06/30/why-do-we-use-the-linux-kernels-tcp-stack/</id>
    <content type="html"><![CDATA[

<p>I&rsquo;m at PolyConf in Poland today, and I watched this super interesting talk by Leandro Pereira about <a href="https://lwan.ws/">Lwan</a>, an ~8000 line of code web server. He talked about a bunch of the optimizations they&rsquo;d done (improve CPU cache performance! be really careful about locking!). You can read more about the performance on the website &amp; the links there.</p>

<p>It&rsquo;s a super cool project because it started out as a hobby project, and now he says it&rsquo;s getting to a state where it kinda actually really works and people are using it for real things. This web server is extremely fast &ndash; it can do, in some benchmarks, 2 million requests per second.</p>

<p>Before I start talking about this &ndash; of course practically nobody needs to do 2 million requests per second. I sure don&rsquo;t. But thinking about high performance computing is a really awesome way to understand the limits of computers better!</p>

<p>I tracked him down to ask him questions later, and he mentioned that most of the time is spent talking to the Linux kernel and copying things back and forth.</p>

<h3 id="writing-your-own-tcp-stack-is-way-faster">writing your own tcp stack is way faster</h3>

<p>Then he said something really surprising: that in the <a href="http://www.seastar-project.org/">Seastar</a> HTTP framework, they <strong>wrote their own TCP stack</strong>, and it made everything several times times faster. What?!</p>

<p>So &ndash; this made me wonder. When we do high performance networking &ndash; why do we bother using the Linux kernel&rsquo;s TCP stack at all, if it&rsquo;s so expensive? Why not just do all the networking in userspace? I had no idea where to start with this question, so I <a href="https://twitter.com/b0rk/status/748649763118133248">asked on Twitter</a>. As often happens, you all came through with ONE BILLION INTERESTING LINKS AND ANSWERS.</p>

<h3 id="embedded-devices">embedded devices</h3>

<p>If you&rsquo;re working on a very small computer without an operating system, you sometimes need to do networking anyway! In this case it seems pretty common to use a separate TCP stack. A ton of people mentioned that they either used <a href="http://savannah.nongnu.org/projects/lwip/">lwIP</a> or wrote their own TCP stack to meet their own specific requirements.</p>

<p>I asked a few people whether anyone uses lwIP on a Real Server, but it seems like it&rsquo;s optimized for small devices, and not for doing huge amounts of network traffic on big servers.</p>

<h3 id="high-frequency-trading">high frequency trading</h3>

<p>Who cares about doing a ton of very fast network requests? People who do high frequency trading! Luke Gorrie on Twitter (who works on the extremely cool <a href="https://snabb.co/">Snabb Switch</a> open source Ethernet stack) said:</p>

<blockquote>
<p>Solarflare sell a userspace TCP stack to HFT market (OpenOnload) for use with
their NICs. Code is GPL actually.</p>
</blockquote>

<p>So, this makes a lot of sense. If you want to do super high performance networking, you can probably afford to buy special network cards and special software to make those network cards perform super well. Cool. But what if you want to do higher performance networking on commodity hardware, with any random network card? Is that a thing?</p>

<h3 id="what-about-google">what about Google?</h3>

<p>Who else does a ton of networking? Google! Happily Google sometimes writes papers so we know a little bit about what they do there.</p>

<p>Tons of people told me about <a href="http://research.google.com/pubs/pub44824.html">Maglev</a>, which is Google&rsquo;s load balancer, and they do all of their networking for that in userspace! I think they operate at a lower level than TCP so they don&rsquo;t have a TCP stack, but it is an example of extremely fast networking without using the Linux kernel.</p>

<p>I haven&rsquo;t read the Maglev paper yet but it seems like a good starting point.</p>

<p>There&rsquo;s also <a href="https://cloudplatform.googleblog.com/2015/06/A-Look-Inside-Googles-Data-Center-Networks.html?m=1">this blog post</a> and <a href="http://conferences.sigcomm.org/sigcomm/2015/pdf/papers/p183.pdf">paper</a> about software-defined networking at Google. A useful keyword here seems to be &ldquo;Jupiter&rdquo; or &ldquo;Jupiter fabrics&rdquo; but I&rsquo;m not sure what that is. <a href="http://www.nextplatform.com/2015/06/19/inside-a-decade-of-google-homegrown-datacenter-networks/">Here&rsquo;s another article though</a>.</p>

<h3 id="is-the-real-reason-to-write-your-own-tcp-stack-for-performance">is the real reason to write your own TCP stack for performance?</h3>

<p><a href="https://twitter.com/tgraf__">@tgraf__</a> made a super interesting point &ndash; I thought the reason you would make your own TCP stack was to make it fast. But maybe not always!!</p>

<blockquote>
<p>Google can&rsquo;t force Android vendors to rebase kernels but requires new TCP
functionality such as TCP fast open.</p>
</blockquote>

<p>The TCP standard is evolving, and if you have to always use your kernel&rsquo;s TCP stack, that means you can NEVER EVOLVE.</p>

<h3 id="why-is-tcp-in-the-kernel-slow">why is TCP in the kernel slow?</h3>

<p>This <a href="https://lwn.net/Articles/169961/">article from LWN</a> &ldquo;Van Jacobsen&rsquo;s network channels&rdquo; says that dealing with TCP in kernel space means locks and contention. thanks for @tef_ebooks for linking this article and explaining it to me :)</p>

<blockquote>
<p>The key to better networking scalability, says Van, is to get rid of locking and shared data as much as possible, and to make sure that as much processing work as possible is done on the CPU where the application is running. It is, he says, simply the end-to-end principle in action yet again. This principle, which says that all of the intelligence in the network belongs at the ends of the connections, doesn&rsquo;t stop at the kernel. It should continue, pushing as much work as possible out of the core kernel and toward the actual applications.</p>
</blockquote>

<h3 id="how-does-seastar-work">how does Seastar work?</h3>

<p>That fast networking framework Seastar from before is written using something from Intel called <a href="http://dpdk.org/">DPDK</a>. The deal with DPDK seems to be that it&rsquo;s a network card driver and some libraries, but instead of it giving you packets through interrupts (asynchronously), instead it polls the network card and say &ldquo;do you have a packet yet? now? now? now?&rdquo;.</p>

<p>This makes sense to me because in general if you always have new events to process, then polling is faster (because you basically don&rsquo;t have to wait). Here&rsquo;s some documentation about the <a href="http://dpdk.org/doc/guides-16.04/prog_guide/poll_mode_drv.html">poll mode driver</a> and an [example of a DPDK] application.</p>

<p>I think with DPDK you can write networking applications that work entirely in userspace with no system calls.  <a href="https://twitter.com/Lukasaoz/status/748853883703820293">Cory Benfield</a> explained a bunch of these things to me.</p>

<h3 id="open-source-stuff-right-now-pretty-specific">open source stuff right now: pretty specific</h3>

<p>As far as I can tell, there aren&rsquo;t any available general purpose open source userspace TCP/IP stacks available. There are a few specialized ones, but this does not seem to exist right now. But people seem to be interested in the topic!</p>

<h3 id="some-more-links">some more links</h3>

<p>Here are some more links that do networking in userspace! This is mostly a link dump so that I can click on them later but maybe you will like them too.</p>

<p><a href="https://zmap.io/paper.pdf">zmap</a> is a TCP port scanner.</p>

<p><a href="https://github.com/robertdavidgraham/masscan">masscan</a> is another TCP port scanner. It says it can scan the entire internet in 5 minutes. What? Outlandish! I will need to read more about this!</p>

<p><a href="https://github.com/lkl/linux">LKL</a> is an attempt to make the Linux kernel networking code (as well as other Linux code) into a library (!!) so that we can use it in userspace. This sounds like a monumental effort and also extremely interesting. <a href="https://twitter.com/thehajime/status/748657015702986752">@thehakime said about this</a>:. <a href="http://www.slideshare.net/hajimetazaki/library-operating-system-for-linux-netdev01">Here&rsquo;s a talk about LKL.</a></p>

<blockquote>
<p>there are so many uspace network stacks (mtcp, lwip, seastar, sandstrom) but all are so specialized. I think it can be generalized.</p>
</blockquote>

<p><a href="https://github.com/pkelsey/libuinet">libuinet</a> is a library version of FreeBSD&rsquo;s TCP stack. I guess there&rsquo;s a theme here.</p>

<p><a href="https://github.com/eunyoung14/mtcp">mtcp</a> is a userspace TCP stack. I don&rsquo;t know anything about it. There&rsquo;s also <a href="https://github.com/adamdunkels/uip">uip</a> and <a href="http://savannah.nongnu.org/projects/lwip/">lwIP</a>.</p>

<h3 id="phew">phew.</h3>

<p>Okay, that was a lot of new facts and ideas to come out of the comment &ldquo;a lot of the overhead of a HTTP server is communicating with the kernel&rdquo;.</p>

<p>I like how if you ask the right questions Twitter will just hurl super interesting information at you until you&rsquo;re like OK OK OK MY BRAIN IS FULL. And then they keep telling you awesome stuff anyway :)</p>

<p>There seems to be a lot of work going on here! There are like 100 interesting rabbit holes which I have zero time to investigate right now! Awesome.</p>

<p><small>
This is unusual for me to say, but the <a href="https://news.ycombinator.com/item?id=12021195">Hacker News comments</a> on this post are mostly quite informative and a few people talk about their experiences, positive and negative, implementing network stacks. I enjoyed reading them.
</small></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to spy on a Ruby program]]></title>
    <link href="https://jvns.ca/blog/2016/06/12/a-weird-system-call-process-vm-readv/"/>
    <updated>2016-06-12T10:43:06+00:00</updated>
    <id>https://jvns.ca/blog/2016/06/12/a-weird-system-call-process-vm-readv/</id>
    <content type="html"><![CDATA[

<p>I love debugging tools. One of the most frustrating things to me is &ndash; when I run a Ruby or Python program, I can&rsquo;t find out what that program is doing RIGHT NOW.</p>

<p>You might eagerly interrupt me &ndash; julia, you say, you can use pdb! or pry! or <a href="https://github.com/tmm1/rbtrace">rbtrace!</a>.</p>

<p>So, let me explain. If I&rsquo;m running a program on the JVM with PID 4242, I can run  <code>jstack -p 4242</code>, and it will print the current stack trace of the Java program. Any Java program. It doesn&rsquo;t need any special configuration!!</p>

<p>In C, you can run <code>sudo perf top</code> on a Linux machine and it&rsquo;ll instantly give you a live profile of all the C functions that are running. For any C program. (did you know you can do this?! this is one of my favorite things. it is amazing!). <code>pstack</code> does something similar to <code>jstack</code>, but only for 32-bit binaries :(.</p>

<p>In Ruby.. there&rsquo;s nothing, yet. You can pre-instrument your Ruby program and there are libraries you can use, but this stuff isn&rsquo;t built into the ecosystem in the same way. This makes me grumpy because I&rsquo;m like IF JAVA CAN HAVE NICE THINGS THEN WHY NOT RUBY AND PYTHON??</p>

<p>So, let&rsquo;s talk about how you could build jstack for Ruby.</p>

<h3 id="step-1-gdb">step 1: gdb</h3>

<p>Scott Francis from Shopify has this <a href="https://gist.github.com/csfrancis/11376304">great gdb script</a> that will print a Ruby stacktrace if you attach to it with gdb. You can read how the script works in <a href="http://engineering.shopify.com/112738884-adventures-in-production-rails-debugging">Adventures in Production Rails Debugging</a>.</p>

<p>It took me a couple of days to understand what&rsquo;s going on with that script &ndash; when you attach to a program with gdb, it seems like basically black magic, but as usual it&rsquo;s actually not magic at all.</p>

<p>First, let&rsquo;s explore a little with gdb. This is a little messy, but I want you to see how you explore a program&rsquo;s memory with gdb because I think it&rsquo;s cool. I&rsquo;ve redacted some of the longer output.</p>

<pre><code># HELLO RUBY. What is the address of the current thread in this process?
(gdb) p ruby_current_thread
$1 = (rb_thread_t *) 0x55b89eb775b0

# SWEET. let's get the current frame pointer! That is where
# we are going to find the stack trace!
(gdb) p ruby_current_thread-&gt;cfp
$2 = (rb_control_frame_t *) 0x7f217f1dbfc0

# Oh, but I didn't just want the address! Let's see what's inside!
(gdb) p *(ruby_current_thread-&gt;cfp)
$3 = {pc = 0x55b89ecd2ca0, sp = 0x7f217f0dc020, iseq = 0x55b89ecd2840,
    flag = 833, self = 94251425195000, klass = 8, ep = 0x55b89ecd2df8,    block_iseq = 0x0,
    proc = 0, me = 0x0}

# Next step: we need to look at the `iseq` property. That's another
# pointer, and we'll also dereference it to see what's inside
(gdb) p ruby_current_thread-&gt;cfp-&gt;iseq
$4 = (rb_iseq_t *) 0x55b89ecd2840
(gdb) p *(ruby_current_thread-&gt;cfp-&gt;iseq)
$5 = {type = ISEQ_TYPE_TOP, location = {path = 94251425516800, absolute_path =
8, base_label = 94251425523360, label = 94251425523360,      first_lineno = 1},
iseq = 0x55b89ecd2c80, iseq_encoded = 0x55b89ecd2ca0, iseq_size = 2, mark_ary =
[... left out a bunch of stuff here ...]}

# Phew. That was kind of long. Luckily, we just care about
# `location.path` and `location.label.`
# Let's print those out!
(gdb) p *((struct RString*) (ruby_current_thread-&gt;cfp + 1)-&gt;iseq.location.label)
$7 = {basic = {...}, as = {heap = ..., 
    ary = &quot;block in initialize\000\000\000\000&quot;}}
(gdb) p *((struct RString*) (ruby_current_thread-&gt;cfp + 1)-&gt;iseq.location.path)
$8 = {basic = {flags = 546318437, klass = 94660819015280}, as = {heap = {len = 64, 
ptr = 0x5617f3432440 &quot;/home/bork/.rbenv/versions/2.1.6/lib/ruby/2.1.0/webrick/utils.rb&quot;,}
</code></pre>

<p><strong>This is amazing</strong>. It&rsquo;s amazing, because we started with practically nothing &ndash; just an address of the current thread! And we finished with a file (<code>/home/bork/.rbenv/versions/2.1.6/lib/ruby/2.1.0/webrick/utils.rb</code>), and a place we are in that file: <code>block in initialize</code>. We had to write a kind of weird thing to get that information (<code>*((struct RString*) (ruby_current_thread-&gt;cfp + 1)-&gt;iseq.location.label)</code>), but we got it.</p>

<p>The <a href="https://gist.github.com/csfrancis/11376304">script</a> from before basically does what I just did, except it&rsquo;s a little smarter and can also get you line numbers. Cool.</p>

<h3 id="gdb-isn-t-good-enough">gdb isn&rsquo;t good enough</h3>

<p>So this is pretty awesome. We can attach to almost any Ruby process and get a stack trace! Isn&rsquo;t that what I wanted?</p>

<p>Well, not quite. gdb uses the <code>ptrace</code> system call, in this case to stop the program in its tracks and then intensely query it for its internals. This is slower than what I want. Maybe my Ruby program needed to actually keep running!</p>

<p>When I ran that gdb command <code>p *((struct RString*) (ruby_current_thread-&gt;cfp + 1)-&gt;iseq.location.path)</code> &ndash; it does a ton of stuff. I was going to paste the strace output of what gdb is actually doing, but it is 20 megabytes of system calls. So here&rsquo;s a small excerpt: Every time I need to read memory from the target program (which is what looking up strings is doing!), it issues a bunch of system calls like</p>

<pre><code>ptrace(PTRACE_PEEKTEXT, 5677, 0x5617f3432440, [0x6f622f656d6f682f]) = 0
ptrace(PTRACE_PEEKTEXT, 5677, 0x5617f3432448, [0x6e6562722e2f6b72]) = 0
ptrace(PTRACE_PEEKTEXT, 5677, 0x5617f3432450, [0x6f69737265762f76]) = 0
ptrace(PTRACE_PEEKTEXT, 5677, 0x5617f3432458, [0x362e312e322f736e]) = 0
ptrace(PTRACE_PEEKTEXT, 5677, 0x5617f3432460, [0x6275722f62696c2f]) = 0
ptrace(PTRACE_PEEKTEXT, 5677, 0x5617f3432468, [0x2f302e312e322f79]) = 0
ptrace(PTRACE_PEEKTEXT, 5677, 0x5617f3432470, [0x2f6b636972626577]) = 0
ptrace(PTRACE_PEEKTEXT, 5677, 0x5617f3432478, [0x62722e736c697475]) = 0
ptrace(PTRACE_PEEKTEXT, 5677, 0x5617f3432480, [0x780062722e736c00]) = 0
</code></pre>

<p>So, how does gdb work? Here&rsquo;s what it does:</p>

<p>First, it reads debugging info out of my Ruby binary. This tells it the size and structure of the structs it needs access to &ndash; <code>rb_iseq_t</code>, <code>struct RString</code>, <code>rb_control_frame_t</code>. If you don&rsquo;t know what the memory at address means, you can&rsquo;t do anything!</p>

<p>So, let&rsquo;s say I run <code>p ruby_current_thread-&gt;cfp</code> in gdb. What does gdb do, exactly?</p>

<ol>
<li>Look up the address of <code>ruby_current_thread</code> in the symbol table. Let&rsquo;s say that&rsquo;s 0x5617f3432440.</li>
<li>Look in the debug info to figure out what type it has (<code>rb_thread_t</code>)</li>
<li>Go get the bytes at address <code>0x5617f3432440</code>, by using the <code>ptrace(PTRACE_PEEKTEXT</code> system call</li>
<li>Look in the debug info to figure out what the offset is of the <code>cfp</code> member of the <code>rb_thread_t</code> struct.</li>
</ol>

<p>we&rsquo;re done! So, this is really cool. We&rsquo;ve learned how gdb works! <a href="https://twitter.com/nasrat">Pris Nasrat</a> helped me figure out how gdb works.</p>

<h3 id="dwarf">DWARF</h3>

<p>Before we move on, we need to talk about DWARF. Remember when I said it reads debugging info out of the Ruby binary? That uses a format called DWARF. I&rsquo;m not going to go into how you read that info right now because frankly I don&rsquo;t know.</p>

<p>But &ndash; when people say &ldquo;you need to compile this with debugging symbols&rdquo;, what they mean by &ldquo;debugging symbols&rdquo; is DWARF.</p>

<h3 id="spying-on-our-program-without-gdb">spying on our program without gdb.</h3>

<p>Okay, cool! So, what if we wanted to get stack traces out of a program <strong>without</strong> gdb? Is that a thing that could happen? Turns out: yes!</p>

<p>When we were learning how gdb works, we figured out that as long as you have</p>

<ol>
<li>the debugging info, and</li>
<li>the ability to read memory from your target program</li>
</ol>

<p>you&rsquo;re good to go! gdb happens to use the <code>ptrace</code> system call to read memory from the Ruby program, but that&rsquo;s not necessary, it turns out! We are going to make a new friend.</p>

<h3 id="process-vm-readv"><code>process_vm_readv</code></h3>

<p><a href="http://www.cipht.net">Julian Squires</a> was the person who made me think about all of this in the first place, and I emailed him like UGH JULIAN HOW DO I MAKE THIS WORK and he was like &ldquo;<code>process_vm_readv</code>!&ldquo;. So, what&rsquo;s that? It&rsquo;s a Linux system call! The man page says:</p>

<pre><code>These  system calls transfer data between the address space of the
calling process (&quot;the local process&quot;) and the process identified by pid
(&quot;the remote process&quot;).  The data moves directly between the address
spaces of the two processes,  without  passing  through kernel space.
</code></pre>

<p>So, if I want to spy on the memory of a Ruby program, for example because I&rsquo;m writing a debugger, I can use <code>process_vm_readv</code>! Neat!</p>

<p>The reason this is awesome and better than what gdb does is &ndash; as far as I can tell, the impact of <code>process_vm_readv</code> on the running process is WAY SMALLER. You just spy on the memory and get out of the way!</p>

<h3 id="actually-building-a-thing">actually building a thing</h3>

<p>So far this is all just talk. Does this actually work, Julia? Is it real? Sort of! I wrote a program in Rust to sample stack traces. Rust was a cool way to do this because I don&rsquo;t know how to manually manage memory in C or C++, so literally my C program to do this was just instant memory leaks. In Rust I just had to deal with the compiler, and then I ended up with a working program pretty quickly!</p>

<p>So, I wrote a prototype program to do this. You can see the source <a href="https://github.com/jvns/ruby-stacktrace/blob/master/src/main.rs">here</a>.</p>

<h3 id="it-works-kind-of">it works, kind of</h3>

<p>And it WORKED. It started spitting out stack traces of the Ruby program I was writing, every 10 milliseconds! It was pretty fast! It was amazing! I used it to generate a <a href="https://github.com/BrendanGregg/FlameGraph.pl">flame graph</a>. here is my cool flame graph:</p>

<p><a href="/images/sampling.png"><img src="/images/sampling.png"></a></p>

<p>So, that was the good news. The bad news is that I didn&rsquo;t actually learn to use the DWARF libraries yet, so I hardcoded all the struct types, and as a result it doesn&rsquo;t work on anybody&rsquo;s computer but my own. And then I have an actual programming job to do, which so far is in the way of progress. But instead of feeling bad that I haven&rsquo;t actually gotten the software to work yet on other peoples&rsquo; computers, I thought I would take a couple of hours and tell you how it works! Maybe this will motivate me to actually fix it up and make it into Real Software some day later!</p>

<h3 id="debuggers-are-exciting">debuggers are exciting</h3>

<p>this made me even more excited about writing debugging tools! Some questions I have</p>

<ul>
<li>does this tool, that can spit out Ruby stack traces quickly for any Ruby program with debugging symbols enabled, actually exist somewhere and I just don&rsquo;t know about it?</li>
<li>what about for Python?</li>
<li>maybe it doesn&rsquo;t exist because a Linux-only Ruby debugging tool is sort of a weird thing?</li>
<li>if we <em>can</em> build this, and it doesn&rsquo;t exist yet, what other amazing debugging technology could we build?</li>
</ul>

<p>Thanks to Julian Squires, Pris Nasrat, and Kamal Marhubi for helping me with new system calls / gdb / writing Rust!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TIL: clock skew exists]]></title>
    <link href="https://jvns.ca/blog/2016/02/09/til-clock-skew-exists/"/>
    <updated>2016-02-09T23:56:59+00:00</updated>
    <id>https://jvns.ca/blog/2016/02/09/til-clock-skew-exists/</id>
    <content type="html"><![CDATA[

<p>I learned some new things yesterday about distributed systems yesterday! Redis is a key-value store that can be distributed, and apparently it has a proposal for a locking system called <a href="http://redis.io/topics/distlock">Redlock</a>.</p>

<p>Yesterday I read the articles where <a href="http://martin.kleppmann.com/2016/02/08/how-to-do-distributed-locking.html">Martin Kleppman criticizes Redlock</a> and <a href="http://antirez.com/news/101">Redlock&rsquo;s author, antirez, responds</a>.</p>

<p>These are very interesting to read as a distributed systems n00b &ndash; the authors of the articles are making significantly different arguments, and so it&rsquo;s a useful exercise to try to reason through the arguments and figure out who you think is right.</p>

<p>Martin Kleppman, as far as I understand, argues that Redlock isn&rsquo;t safe to use because</p>

<ul>
<li>processes can pause for arbitrary amount of time (because of garbage collection or CPU scheduling)</li>
<li>network requests can be arbitrarily delayed at any time</li>
<li>The clock on a computer can be unreliable (because it goes at the wrong speed, or has jumped back in time)</li>
</ul>

<p>Probably other reasons too, but those are the ones I understood.</p>

<p>Here&rsquo;s a chart from his post illustrating  how things can go wrong:</p>

<p><img src="/images/unsafe-lock.png"></p>

<h3 id="process-pauses-network-delays-are-totally-real-but-clock-skew">process pauses &amp; network delays are totally real. but, clock skew?</h3>

<p>Part of antirez&rsquo;s response is &ldquo;well, you can assume your clock is mostly correct though!&rdquo;.</p>

<blockquote>
<p>What they need to do is just, for example, to be able to count 5 seconds with a maximum of 10% error. So one counts actual 4.5 seconds, another 5.5 seconds, and we are fine.</p>
</blockquote>

<p>Now, I totally believe in garbage collection. I&rsquo;ve seen services become unresponsive because they were garbage collecting. So I definitely believe in process pauses.</p>

<p>I also believe in arbitrary network delays! If you told me that some of my replies saying &ldquo;hey I&rsquo;m finished with the lock&rdquo; would be (very very occasionally) delayed for 1-2 seconds, I&rsquo;d believe you. 1-2 seconds is a lot of computer time!!</p>

<p>As far as I can tell, either of those two things by themselves is enough to make Redlock not safe. (if you account for process pauses, you could <strong>still have another process pause after you account for them</strong>, right?)</p>

<p>But, we were talking about clock skew.</p>

<p>Clock skew is when your clock is going, say, 10% or 2x faster than it should. If uncorrected, this is a disaster for a system that depends on knowing the right time.</p>

<p>Here&rsquo;s the thing &ndash; I haven&rsquo;t seen a lot of systems, but I&rsquo;ve never seen a system with a clock running too fast. My laptop&rsquo;s clock mostly works, as far as I know my servers at work have approximately correct clocks (though maybe they don&rsquo;t and I just don&rsquo;t know!). Why is Martin Kleppman so worried about this?</p>

<p>I asked about this, and <a href="https://twitter.com/handler">@handler</a> and <a href="https://twitter.com/aphyr">@aphyr</a> both helped me out. They were basically both totally &ldquo;julia systems with clocks that go at bogus speeds totally exist. 2x clock skew is real&rdquo;.</p>

<h3 id="a-few-links-about-clock-skew">a few links about clock skew</h3>

<p><a href="http://xenia.media.mit.edu/~nelson/research/ntp-survey99/html/">Check out this 1999 paper</a> by Nelson Minar that surveys NTP (network time protocol) servers and finds that they&rsquo;re often serving incorrect times.</p>

<p><a href="https://aphyr.com/posts/299-the-trouble-with-timestamps">The trouble with timestamps</a> by @aphyr has a great explanation about why you should care about your clock.</p>

<p>Here&rsquo;s <a href="http://sec.cs.ucl.ac.uk/users/smurdoch/papers/ccs06hotornot.pdf">an attack on Tor</a> where if you induce high CPU load on a node, the temperature is likely to cause the clock skew to increase on that node. There&rsquo;s also <a href="https://www.usenix.org/legacy/event/sec08/tech/full_papers/zander/zander_html/">a follow up paper</a></p>

<p>Leap seconds are real. (there was one in 2015!) This post <a href="http://developerblog.redhat.com/2015/06/01/five-different-ways-handle-leap-seconds-ntp/">5 different ways to handle leap seconds</a> has a ton of cool graphs. (thanks <a href="https://twitter.com/ncoghlan_dev">Nick Coghlan</a>!)</p>

<p>Google pretty much knows what time it is &ndash; they invested a ton of time in a system called Spanner. Here are <a href="http://radar.oreilly.com/2012/10/google-spanner-relational-database.html">a couple</a> of <a href="http://www.wired.com/2012/11/google-spanner-time/">articles</a> about that.</p>

<h3 id="distributed-systems-weird-computer-things">distributed systems &amp; weird computer things</h3>

<p>Distributed systems researchers are really really concerned with adverse, sometimes uncommon, things that can happen to your computer (like clock skew).</p>

<p>I think they&rsquo;re concerned for three reasons:</p>

<ol>
<li>they&rsquo;re trying to prove theorems, and if you&rsquo;re proving a theorem you need to worry about all the edge cases</li>
<li>they&rsquo;re operating literally 20 million computers. if you have 20 million computers everything that can go wrong with a computer will go wrong.</li>
<li>some of those seemingly uncommon things are actually quite common (like network partitions)</li>
</ol>

<p>I don&rsquo;t know at all how many computers Google has, but I bet it&rsquo;s a lot. Like 20 million or something.</p>

<p>Reasons 1 and 2 are related &ndash; if you prove a theorem that your system is safe, then it&rsquo;ll be safe even if you have 20 million computers. Theorems are the best.</p>

<p>So my laptop&rsquo;s clock is probably mostly okay, but at Google scale I&rsquo;d imagine you have computers with broken clocks all the time.</p>

<h3 id="reasoning-about-distributed-systems-is-interesting">reasoning about distributed systems is interesting</h3>

<p>I&rsquo;m not a distributed systems engineer, really. (though I deal with some at work sometimes). I think, if you have plans to interact with distributed systems in the future, it&rsquo;s really useful to try to reason through issues like this for yourself! There&rsquo;s a ton of terminology (the first time I watched one of the <a href="https://www.youtube.com/watch?v=mxdpqr-loyA">Jepsen talks</a> I was like &ldquo;wat.&rdquo;)</p>

<p>So I think it&rsquo;s fun to practice sometimes. Maybe one day you learn what linearizability is! and 6 months later you&rsquo;re like &ldquo;oh I actually didn&rsquo;t get it I was totally wrong.&rdquo;</p>

<h3 id="clock-skew-is-real">clock skew is real</h3>

<p>People I know have experienced it! It is not just a weird theoretical thing to give researchers jobs. Huh.</p>

<p><small>
thanks for <a href="https://twitter.com/skamille">Camille Fournier</a>, <a href="https://twitter.com/handler">Michael Handler</a>, and <a href="https://twitter.com/aphyr">Kyle Kingsbury</a> for trying to explain distributed systems things to me. I have likely made lots of mistakes in writing this, and those mistakes are all mine :)
</small></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why I ❤ Rust]]></title>
    <link href="https://jvns.ca/blog/2016/01/10/why-i-rust/"/>
    <updated>2016-01-10T08:43:43+00:00</updated>
    <id>https://jvns.ca/blog/2016/01/10/why-i-rust/</id>
    <content type="html"><![CDATA[<p>I gave a talk about why I like Rust a while ago! There&rsquo;s no video. Normally my
talk slides are unremarkable and I don&rsquo;t post them, but I think these mostly stand on their own and I&rsquo;m happy with how they turned out. <a href="https://speakerdeck.com/jvns/why-i-rust">Here it is (and it&rsquo;s embedded below)</a>.</p>

<script async class="speakerdeck-embed" data-id="2217f185971243a4ac638c2fa6993ca0" data-ratio="1.29456384323641" src="//speakerdeck.com/assets/embed.js"></script>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Things you should know about stock options before negotiating an offer]]></title>
    <link href="https://jvns.ca/blog/2015/12/30/do-the-math-on-your-stock-options/"/>
    <updated>2015-12-30T10:27:46+00:00</updated>
    <id>https://jvns.ca/blog/2015/12/30/do-the-math-on-your-stock-options/</id>
    <content type="html"><![CDATA[

<p>Are you considering an offer from a private company, which involves stock options? Do you think those stock options might be worth something one day? Are you confused? Then read this! I’ll give you some motivation to learn more, and a few questions to consider asking your prospective employer.</p>

<p>I polled people on Twitter and 65% of them said that they&rsquo;ve <a href="https://twitter.com/b0rk/status/682041239508746240">accepted an offer without understanding how the stock options work</a>.</p>

<p>I have a short story for you about stock options. First: stock options are BORING AND COMPLICATED AND AWFUL. They are full of taxes, which we all know are awful. Some people think they&rsquo;re fun and interesting to learn about. I am not one of those people. However, if you have an offer that involves stock options, I think you should learn a little about them anyway.
All of the following assumes that you work for a private company that is still private when you leave it.</p>

<p>In this post I don&rsquo;t want to explain comprehensively how options work. (For that, see <a href="http://robertheaton.com/2015/11/02/how-to-value-your-startup-stock-options/">how to value your startup stock options</a> or <a href="https://github.com/jlevy/og-equity-compensation">The Open Guide to Equity Compensation
</a>) Instead I want to tell you a story, and convince you to ask more questions, do a little research, and do more math.</p>

<p>I took a job 2 years ago, with a company with a billion-dollar-plus valuation. I was told &ldquo;we pay less than other companies because our stock option offers are more generous&rdquo;. Okay. I understood exactly nothing about stock options, and accepted the offer. To be clear: I don&rsquo;t <em>regret</em> accepting the offer (my job is great! I ❤ my coworkers). But I do wish I&rsquo;d understood the (fairly serious) implications at the time.</p>

<p>From my offer letter:</p>

<blockquote>
<p>the offer gives you the option to purchase 114,129
shares of Stripe stock. [We bias] our offers to
place weight on your ownership in the company.</p>

<p>I&rsquo;m happy to talk you through how we think about the value of the
options. As far as numbers: there are approximately [redacted]
outstanding shares. We can talk in more detail about the current valuation and the strike price for your options.</p>
</blockquote>

<p>This is a good situation! They were being pretty upfront with me. I had access to all the information I needed to do a little math. I did not do the math. Let me tell you how you can start with an offer letter like this and understand what&rsquo;s going on a little better!</p>

<h3 id="what-the-math-looks-like-it-s-just-multiplication">what the math looks like (it&rsquo;s just multiplication)</h3>

<p>The math I want you to do is pretty simple. The following example stock option offer is not at all my situation, but there are some similarities that I&rsquo;ll explain in a minute.</p>

<p>The example situation:</p>

<ul>
<li>stock options you&rsquo;re being offered: 500,000</li>
<li>vesting schedule: 4 years. you get 25% after the first year, then the rest granted every month for the remainder of the time.</li>
<li>outstanding shares: 100,000,000 (the number of total shares the company has)</li>
<li>company&rsquo;s current valuation: 1 billion dollars</li>
</ul>

<p>This is an awesome start. You have options to buy 0.5% of the shares of a billion dollar company. What could be better? If you stay with the company until it goes public or dies, this is easy. If the company goes public and the stock price is more than your exercise price, you can exercise your options, sell as much of the stock as you want to, and make money. If it dies, you never exercise the options and don’t lose anything. win-win. This is where options excel.</p>

<p>However! If you want to <em>ever</em> quit your job (in the next 5 years, say!), you may not be able to sell any of your stock for a long time. You have more math to do.</p>

<p>ISOs (the usual way companies issue stock options) expire 3 months after you quit. So if you want to use them, you need to buy (or “exercise”) them. For that, you need to know the exercise price. You also need to know the fair market value (current value of the stock), for reasons that will become apparent in a bit. We need a little more data:</p>

<ul>
<li>exercise price or strike price: $1. (This is how much it costs, per share, to buy your options.)</li>
<li>current fair market value: $1 (This is how much each share is theoretically worth. May or may not have any relationship to reality)</li>
<li>fair market value, after 3 years: $10</li>
</ul>

<p>All this is information the company should tell you, except the value after 3 years, which would involve time travel. Let&rsquo;s see how this plays out!</p>

<h3 id="time-to-quit">time to quit</h3>

<p>Okay awesome! You had a great job, you&rsquo;ve been there 3 years, you worked hard, did some great work for the company, you want to move on. What next? Since your options vested over 4 years, you now have 375,000 options (75% of your offer) that you can exercise. Seems great.</p>

<p>Surprise! Now you need to pay hundreds of thousands of dollars to invest in an uncertain outcome. The outcomes (IPO, acquisition, company fails) are all pretty complicated to discuss, but suffice to say: you can lose money by investing in the company you work for. It may be a good investment, but it’s not risk-free. Even an acquisition can end badly for you (the employee). Let’s see exactly how it costs you hundreds of thousands of dollars:</p>

<p><strong>Pay the exercise price</strong>:</p>

<p>The exercise price is $1, so it costs $375,000 to turn your options into stock. Your options go <em>poof</em> in three months, but you can keep the stock if you buy it now.</p>

<p>What?! But you only have 300k in the bank. You thought that was&hellip; a lot. You make an amazing salary (even $200k/year wouldn’t cover that). You can still afford a lot of it though! Every share costs $1, and you can buy as many or as few as you want. No big deal.</p>

<p>You have to decide how much money you want to spend here. Your company hasn’t IPO’d yet, so you’ll only be able to make money selling your shares if your company eventually goes public <em>AND</em> sells for a higher price than your exercise price. If the company dies, you lose all the money you spent on stock. If the company gets acquired, the outcome is unpredictable, and you could still get nothing for all the money you spend exercising options.</p>

<p>Also, it gets worse: taxes!</p>

<p><strong>Pay the taxes</strong>:</p>

<p>The value of your stock has gone up! This is awesome. It means you get the chance to pay a lot of taxes! The difference in value between $1 (the exercise price) and $10 (the current fair market value) is $9. So you&rsquo;ve potentially made $9 * 375000 = 3.3 million dollars.</p>

<p>Well, you haven&rsquo;t actually made that, since you’re buying stock you can’t sell (yet). But your local tax agency <em>thinks</em> you have. In Canada (though I&rsquo;m not yet sure) I might have to pay income tax on that 3 million dollars, whether or not I have it. So that&rsquo;s an extra 1.2 million in taxes, without any extra cash.</p>

<p>The tax implications are super boring and complicated, and super super important. If you work for a successful company, and its value is increasing over time, and you try to leave, the taxes can make it totally unaffordable to exercise your options. Even if the company wasn&rsquo;t worth a lot when you started! See for instance <a href="https://news.ycombinator.com/item?id=10695125">this person describing how they can&rsquo;t afford the taxes on their options</a>. Early exercise can be a good defense against taxes (see the end of this post).</p>

<h3 id="my-actual-situation">my actual situation</h3>

<p>I don&rsquo;t want to get too far into this fake situation because when people tell me fake situations, I&rsquo;m like &ldquo;ok but that&rsquo;s not real why should I care.&rdquo; Here&rsquo;s something real.</p>

<p>I do not own 0.5% of a billion dollar company. In fact I own 0%. But the company I work for <em>is</em> valued at more than a billion dollars, and I <em>do</em> have options to buy some of it. The options I’m granted each year would cost, very roughly, $100,000 (including exercise prices + taxes). Over 4 years, that’s almost half a million dollars. My after-tax salary is less than $100,000 USD/year, so by definition it is impossible for me to exercise my options without borrowing money.</p>

<p>The total amount it would cost to exercise + pay taxes on my options is more than all of the money I have. I imagine that’s the case for some of my colleagues as well (for many of them, this is their first job out of school). If I leave, the options expire after 3 months. I still do not understand the tax implications of exercising at all. (it makes me want to hide under my bed and never come out)</p>

<p>I was really surprised by all of this. I’d never made a financial decision much bigger than buying a $1000 plane ticket or signing a lease before. So the prospect of investing a hundred thousand dollars in some stock? Having to pay taxes on money that I do not actually have? super scary.</p>

<p>So the possibilities, if I want to ever quit my job, are:</p>

<ol>
<li>exercise them somehow (with money I get from ??? somewhere ???).</li>
<li>give up the options</li>
<li>find a way to sell the options or the resulting stock</li>
</ol>

<p>There are several variations on #3. They mostly involve cooperation from your employer &ndash; it&rsquo;s possible that they&rsquo;ll let you sell some options, under some conditions, if you’re lucky / if they like you / if the stars are correctly aligned. This post <a href="http://blog.eladgil.com/2014/01/how-to-sell-secondary-stock.html">How to sell secondary stock</a> says a little more (thanks <a href="https://twitter.com/antifuchs">@antifuchs</a>!). <a href="https://news.ycombinator.com/item?id=10705646">This HN comment</a> describes a situation where someone got an offer from an outside investor, and the investor was told by the company to not buy from him (and then didn’t buy from him). Your employer has all the power.</p>

<p>Again, this isn&rsquo;t a disaster &ndash; I have a good job, which pays me a SF salary despite me living in Montreal. It&rsquo;s a fantastic situation to be in. And certainly having an option to buy stock is better than having nothing at all! But you can ask questions, and I like being informed.</p>

<h3 id="questions-to-ask">Questions to ask</h3>

<p>Stock options are very complicated. If you start out knowing nothing, and you have an offer to evaluate this week, you&rsquo;re unlikely to be able to understand every possible scenario. But you can do better than me!</p>

<p>When I got an offer, they were super willing to answer questions, and I didn&rsquo;t know what to ask. So here are some things you could ask. In all this I&rsquo;m going to assume you work for a US company.</p>

<p><strong>Basic questions:</strong></p>

<ul>
<li>how many stock options (# shares)</li>
<li>vesting schedule (usually 4 years / 1 year “cliff”)</li>
<li>how many outstanding shares</li>
<li>company&rsquo;s current valuation</li>
<li>exercise price (per share)</li>
<li>fair market value (per share: a made-up number, but possibly useful)</li>
<li>if they&rsquo;re offering ISOs, NSOs, or RSUs</li>
<li>how long after leaving do you have to exercise?</li>
</ul>

<p>Then you can do some basic math and figure out how much it would cost to exercise the options, if you choose to. (I have a friend who paid $1 total to exercise his stock options. It might be cheap!)</p>

<p><strong>More ambitious questions</strong></p>

<p>As with all difficult questions, before you accept an offer is the best time to ask, because it&rsquo;s when you have the most leverage.</p>

<ul>
<li>will they let you sell stock to an outside investor?</li>
<li>If you can only exercise for 3 months after leaving, is that negotiable? (<a href="http://www.businessinsider.com/pinterest-will-let-employees-exercise-options-for-seven-years-after-leaving-2015-3">pinterest gives you the option of 7 years and worse tax implications. can they do the same?</a>)</li>
<li>If the company got sold for the current valuation (2X? 10X?) in 2 years, what would my shares be worth? What if the company raises a lot of money between now and then?</li>
<li>Can they give you a summary of what stock &amp; options other people have? This is called the “cap table”. (The reason you might want to know this: often VCs are promised that they&rsquo;ll get their money <em>first</em> in the case of any liquidation event. Before you! Sometimes they&rsquo;re promised at least a 3x return on their investment. This is called a &ldquo;liquidation preference&rdquo; <sup class="footnote-ref" id="fnref:1"><a rel="footnote" href="#fn:1">1</a></sup>.)</li>
<li>What other downside protection do the VCs have? (see <a href="https://www.pehub.com/2015/05/unicorn-deals-offer-venture-investors-plenty-of-downside-protection/">this article</a> for some of the possibilities)</li>
<li>Do the VCs have participation? (there’s a definition of <a href="https://www.fenwick.com/publications/pages/explanation-of-certain-terms-used-in-venture-financing-terms-survey.aspx">participation and other stock option terms here</a>)</li>
<li>Can you early exercise your options? I know someone who early exercised and saved a ton of money on taxes by doing it. <a href="https://github.com/jlevy/og-equity-compensation">This guide</a> talks more about early exercising. <sup class="footnote-ref" id="fnref:2"><a rel="footnote" href="#fn:2">2</a></sup></li>
<li>Do your options vest faster if the company is acquired? What if you get terminated? (these possibilities are called &ldquo;single/double trigger&rdquo;)</li>
</ul>

<p>If you have more ideas for good questions, <a href="https://twitter.com/b0rk">tell me!</a> I&rsquo;ll add them to this list.</p>

<h3 id="talkpay">#talkpay</h3>

<p>I think it’s important to talk about stock option grants! A lot of money can be at stake, and it’s difficult to talk about amounts in the tens or hundreds of thousands.</p>

<p>There’s also some tension about this topic because people get very emotionally invested in startups (for good reason!) and often feel guilt about leaving / discussing the financial implications of leaving. It can feel disloyal!</p>

<p>But if you’re trying to make an investment decision about thousands of dollars, I think you should be informed. Being informed isn’t disloyal :) The company you work for is informed.</p>

<h3 id="do-the-math">Do the math</h3>

<p>The company making you an offer has lawyers and they should know the answers to all the questions I suggested. They’ve thought very carefully about these things already.</p>

<p>I wish I’d known what questions to ask and done some of the math  before I started my job, so I knew what I was getting into. Ask questions for me! :) You’ll understand more clearly what investment decisions might be ahead of you, and what the financial implications of those decisions might be.</p>

<p><small> Thanks for Leah Hanson and Dan Luu for editing help! </small></p>
<div class="footnotes">

<hr />

<ol>
<li id="fn:1">On liquidation preferences: Suppose a VC invests 100M, and is promised a 3x return on investment. If the company later sells for 300M (or less), the VC gets all of it and you get nothing. That’s it. Liquidation preferences are important to know about.
 <a class="footnote-return" href="#fnref:1"><sup>[return]</sup></a></li>
<li id="fn:2">On early exercise: I also know people who have <em>lost</em> a lot of money by early exercising, if it&rsquo;s expensive and turns out to be worth nothing. The important thing is to understand what you&rsquo;re allowed to do.
 <a class="footnote-return" href="#fnref:2"><sup>[return]</sup></a></li>
</ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to trick a neural network into thinking a panda is a vulture]]></title>
    <link href="https://jvns.ca/blog/2015/12/24/how-to-trick-a-neural-network-into-thinking-a-panda-is-a-vulture/"/>
    <updated>2015-12-24T07:35:31+00:00</updated>
    <id>https://jvns.ca/blog/2015/12/24/how-to-trick-a-neural-network-into-thinking-a-panda-is-a-vulture/</id>
    <content type="html"><![CDATA[<p>I have an article published in Code Words, the Recurse Centre quarterly publication! I&rsquo;m pretty happy with how it turned out. It comes with code so that you can reproduce everything in it yourself!</p>

<p>Here it is: <a href="https://codewords.recurse.com/issues/five/why-do-neural-networks-think-a-panda-is-a-vulture">How to trick a neural network into thinking a panda is a vulture</a></p>

<p>Code Words is overall pretty excellent &ndash; you can find <a href="https://codewords.recurse.com/issues">every past article here</a>. I particularly like <a href="https://codewords.recurse.com/issues/three/ddos-and-you">DDoS and you</a> and <a href="https://codewords.recurse.com/issues/two/git-from-the-inside-out">Git from the inside out</a> which taught me a lot about Git internals. Also, <a href="https://codewords.recurse.com/issues/one/when-is-equality-transitive-and-other-floating-point-curiosities">When is equality transitive?</a> is delightful.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I got better at debugging]]></title>
    <link href="https://jvns.ca/blog/2015/11/22/how-i-got-better-at-debugging/"/>
    <updated>2015-11-22T09:30:13+00:00</updated>
    <id>https://jvns.ca/blog/2015/11/22/how-i-got-better-at-debugging/</id>
    <content type="html"><![CDATA[<p>I had a performance review last week where I was told, among other things, that I&rsquo;m very good at debugging, especially difficult &amp; confusing problems. I thought about this and I was like YEAH I AM. But I didn&rsquo;t used to be. What happened?!</p>

<p>I sometimes hear advice to be extremely systematic and organized. I think that&rsquo;s good advice and I told my partner this and he laughed because I am not the most systematic and organized person. But here are some things that I think have helped me anyway:</p>

<p><strong>Remember that the bug is happening for a logical reason</strong></p>

<p>Sometimes when I hit a bug, especially a nondeterministic and difficult to reproduce bug, it&rsquo;s tempting to think &ldquo;oh you know, things just happen, who knows&rdquo;. But everything on a computer does in fact happen for a logical reason (however much the computer may try to convince you otherwise). Reminding myself of that helps me fix bugs. Also known as &ldquo;OK JULIA IT IS NOT FAIRIES WHAT ACTUAL REASON COULD BE CAUSING THIS?&rdquo;</p>

<p><strong>Be unreasonably confident in my ability to fix the bug</strong></p>

<p>I recently dealt with a performance problem in a job at work that took me 3 weeks to fix (see <a href="http://jvns.ca/blog/2015/09/10/a-millisecond-isnt-fast-and-how-we-fixed-it/">a millisecond isn&rsquo;t fast</a>). If I hadn&rsquo;t been able to fix it, I would have felt pretty bad and like it was a waste of 3 weeks.</p>

<p>But we were processing a relatively small number of records, and it was taking 15 hours to do it, and it was NOT REASONABLE and I knew that the job was too slow. And I figured it out, and now it&rsquo;s faster and everyone is happy.</p>

<p>(since I can now often actually fix bugs I tackle, perhaps this confidence is now reasonable :D)</p>

<p><strong>Know more things</strong></p>

<p>This <a href="http://jvns.ca/blog/2015/11/21/why-you-should-understand-a-little-about-tcp/">TCP bug</a> I talked about yesterday? I wouldn&rsquo;t have been able to fix that in my first job out of grad school. I just didn&rsquo;t understand enough about how computer networks work, or computers (I had an awesome math &amp; theoretical CS degree and I did not learn anything about computers there.). And I didn&rsquo;t know strace.</p>

<p>There&rsquo;s a service at work that sometimes takes a long time to respond because of JVM garbage collection pauses. If you don&rsquo;t know that a common source of latency issues on the JVM is garbage collection pauses (or worse, if you don&rsquo;t know that garbage collection pauses are even a thing that happen), then you&rsquo;re going to have a really bad day trying to figure that out.</p>

<p>Understanding the structure of the system I&rsquo;m trying to debug and what some of the common failure modes are has been really indispensable to me.</p>

<p><strong>Talk to other people</strong></p>

<p>I sometimes just ramble into the Slack channel at work about the problem I&rsquo;m working on, which sometimes looks like</p>

<pre><code>julia: i have no idea why this bug is happening
julia: i mean I tried X and it is still happening
julia: and also W
julia: and also Z
julia: OH RIGHT I FORGOT ABOUT ABC
julia: yayy
someone else: :)
</code></pre>

<p>Also sometimes if I start talking about it then someone will come and talk to me and say something helpful! It&rsquo;s the best.</p>

<p>I got really stuck on that 3 week bug we talked about before and got on the phone to <a href="https://twitter.com/avibryant">Avi</a>, which was VERY USEFUL because he wrote the code that I was optimizing. So in that case I didn&rsquo;t just need a rubber duck, I needed to talk to someone who knew more about the code (&ldquo;oh yeah we haven&rsquo;t optimized that part at all yet so it&rsquo;s not a surprise that it&rsquo;s slow!&rdquo;).</p>

<p>I&rsquo;ve gotten way better at figuring out what I don&rsquo;t understand, articulating it, and asking about it.</p>

<p><strong>Use strace</strong></p>

<p>Seriously I could not fix bugs without strace.</p>

<p>More generally, being able to observe directly what a program is actually doing is incredibly valuable. I was trying to debug recently why a request I was sending to Redis was invalid. And I read the code, and asked other people, and they were like &ldquo;huh that looks right&rdquo;. AND THEN I REMEMBERED ABOUT TCPDUMP. (tcpdump shows you the TCP traffic coming in and out of a machine. it&rsquo;s the best.)</p>

<p>So I ran tcpdump on a machine that I knew was sending (valid) requests to Redis, just looked at it as ASCII in my terminal, and then all the information was right there! And I copied the valid thing into what I was testing, and it totally worked and explained everything.</p>

<p><strong>I like it more</strong></p>

<p>I used to not really like debugging. But I started being able to solve harder bugs, and now when I find a thorny debugging problem it&rsquo;s way more exciting to me than writing new code. Most of the code I write is really straightforward. A difficult bug is way more likely to teach me something I didn&rsquo;t know before about how computers can break.</p>

<p>❤ debugging ❤</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why you should understand (a little) about TCP]]></title>
    <link href="https://jvns.ca/blog/2015/11/21/why-you-should-understand-a-little-about-tcp/"/>
    <updated>2015-11-21T09:13:44+00:00</updated>
    <id>https://jvns.ca/blog/2015/11/21/why-you-should-understand-a-little-about-tcp/</id>
    <content type="html"><![CDATA[

<p>This isn&rsquo;t about understanding <em>everything</em> about TCP or reading through <a href="http://www.amazon.com/TCP-Illustrated-Vol-Addison-Wesley-Professional/dp/0201633469">TCP/IP Illustrated</a>. It&rsquo;s about how a little bit of TCP knowledge is essential. Here&rsquo;s why.</p>

<p>When I was at the <a href="http://recurse.com">Recurse Center</a>, I wrote a TCP stack in Python (<a href="http://jvns.ca/blog/2014/08/12/what-happens-if-you-write-a-tcp-stack-in-python/">and wrote about what happens if you write a TCP stack in Python</a>). This was a fun learning experience, and I thought that was all.</p>

<p>A year later, at work, someone mentioned on Slack &ldquo;hey I&rsquo;m publishing messages to NSQ and it&rsquo;s taking 40ms each time&rdquo;. I&rsquo;d already been thinking about this problem on and off for a week, and hadn&rsquo;t gotten anywhere.</p>

<p>A little background: NSQ is a queue that you send to messages to. The way you publish a message is to make an HTTP request on localhost. It really should not take <strong>40 milliseconds</strong> to send a HTTP request to localhost. Something was terribly wrong. The NSQ daemon wasn&rsquo;t under high CPU load, it wasn&rsquo;t using a lot of memory, it didn&rsquo;t seem to be a garbage collection pause. Help.</p>

<p>Then I remembered an article I&rsquo;d read a week before called <a href="https://gocardless.com/blog/in-search-of-performance-how-we-shaved-200ms-off-every-post-request/">In search of performance - how we shaved 200ms off every POST request</a>. In that article, they talk about why every one of their POST requests were taking 200 extra milliseconds. That&rsquo;s.. weird. Here&rsquo;s the key paragraph from the post</p>

<h3 id="delayed-acks-tcp-nodelay">Delayed ACKs &amp; TCP_NODELAY</h3>

<blockquote>
<p>Ruby&rsquo;s Net::HTTP splits POST requests across two TCP packets - one for the
headers, and another for the body. curl, by contrast, combines the two if
they&rsquo;ll fit in a single packet. To make things worse, Net::HTTP doesn&rsquo;t set
TCP_NODELAY on the TCP socket it opens, so it waits for acknowledgement of the
first packet before sending the second. This behaviour is a consequence of
Nagle&rsquo;s algorithm.</p>

<p>Moving to the other end of the connection, HAProxy has to choose how to
acknowledge those two packets. In version 1.4.18 (the one we were using), it
opted to use TCP delayed acknowledgement. Delayed acknowledgement interacts
badly with Nagle&rsquo;s algorithm, and causes the request to pause until the server
reaches its delayed acknowledgement timeout..</p>
</blockquote>

<p>Let&rsquo;s unpack what this paragraph is saying.</p>

<ul>
<li>TCP is an algorithm where you send data in <strong>packets</strong></li>
<li>Their HTTP library was sending POST requests in 2 small packets</li>
</ul>

<p>Here&rsquo;s what the rest of the TCP exchange looked like after that:</p>

<blockquote>
<p>application: hi! Here&rsquo;s packet 1. <br>
HAProxy: &lt;silence, waiting for the second packet&gt;<br>
HAProxy: &lt;well I&rsquo;ll ack eventually but nbd&gt;<br>
application: &lt;silence&gt;<br>
application: &lt;well I&rsquo;m waiting for an ACK maybe there&rsquo;s network congestion&gt;<br>
HAProxy: ok i&rsquo;m bored. here&rsquo;s an ack<br>
application: great here&rsquo;s the second packet!!!!<br>
HAProxy: sweet. we&rsquo;re done here<br></p>
</blockquote>

<p>That period where the application and HAProxy are both passive-aggressively
waiting for the other to send information? That&rsquo;s the extra 200ms. The application is doing it because of Nagle&rsquo;s algorithm, and HAProxy because of delayed ACKs.</p>

<p>Delayed ACKs happen, as far as I understand, by default on <em>every</em> Linux system.
So this isn&rsquo;t an edge case or an anomaly &ndash; if you send your data in more than 1
TCP packet, it can happen to you.</p>

<h3 id="in-which-we-become-wizards">in which we become wizards</h3>

<p>So I read this article, and forgot about it. But I was stewing about my extra 40ms, and then I remembered.</p>

<p>And I thought &ndash; that can&rsquo;t be my problem, can it? can it??? And I sent an email to my team saying &ldquo;I think I might be crazy but this might be a TCP problem&rdquo;.</p>

<p>So I committed a change turning on <code>TCP_NODELAY</code> for our application, and BOOM.</p>

<p>All of the 40ms delays <strong>instantly disappeared</strong>. Everything was fixed. I was a wizard.</p>

<h3 id="should-we-stop-using-delayed-acks-entirely">should we stop using delayed ACKs entirely</h3>

<p>A quick sidebar &ndash; I just read <a href="https://news.ycombinator.com/item?id=9048947">this comment on Hacker News</a> from John Nagle (of Nagle&rsquo;s algorithm) via <a href="https://twitter.com/alicemazzy/status/667799010317574145">this awesome tweet</a> by @alicemazzy.</p>

<blockquote>
<p>The real problem is ACK delays. The 200ms &ldquo;ACK delay&rdquo; timer is a bad idea that
someone at Berkeley stuck into BSD around 1985 because they didn&rsquo;t really
understand the problem. A delayed ACK is a bet that there will be a reply from
the application level within 200ms. TCP continues to use delayed ACKs even if
it&rsquo;s losing that bet every time.</p>
</blockquote>

<p>He goes on to comment that ACKs are small and inexpensive, and that the problems
caused in practice by delayed ACKs are probably much worse than the problems
they solve.</p>

<h3 id="you-can-t-fix-tcp-problems-without-understanding-tcp">you can&rsquo;t fix TCP problems without understanding TCP</h3>

<p>I used to think that TCP was really low-level and that I did not need to understand it. Which is mostly true! But sometimes in real life you have a bug and that bug is because of something in the TCP algorithm. So it turns out that understanding TCP is important. (as we frequently discuss on this blog, this turns out to be true for a lot of things, like, system calls &amp; operating systems :) :))</p>

<p>This delayed ACKs / TCP_NODELAY interaction is particularly bad &ndash; it could affect anyone writing code that makes HTTP requests, in any programming language. You don&rsquo;t have to be a systems programming wizard to run into this. Understanding a tiny bit about how TCP worked really helped me work through this and recognize that that thing the blog post was describing also might be my problem. I also used strace, though. strace forever.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A millisecond isn&#39;t fast (and how we made it 100x faster)]]></title>
    <link href="https://jvns.ca/blog/2015/09/10/a-millisecond-isnt-fast-and-how-we-fixed-it/"/>
    <updated>2015-09-10T08:28:56+00:00</updated>
    <id>https://jvns.ca/blog/2015/09/10/a-millisecond-isnt-fast-and-how-we-fixed-it/</id>
    <content type="html"><![CDATA[<p>Hi friends! For the first time today I&rsquo;m going to tell you about my DAY
AT WORK (machine learning at Stripe) yesterday. =D. This is a
collaboration with <a href="http://kamalmarhubi.com">Kamal Marhubi</a> who did this
profiling with me after work because I was so mad about the performance.</p>

<p>I used to think a millisecond was fast. At work, I have code that runs
some VERY_LARGE_NUMBER of times. It&rsquo;s distributed and split up into
tasks, and an individual task runs the code more than 6 million times.</p>

<p>I wrote a benchmark for the Slow Code and found it could process
~1000 records/s. This meant that processing 6 million things would take
1.5 hours, which is Slow. The code is kind of complicated, so originally
we all thought this was a reasonable amount of time. But my heart was
sad.</p>

<p>Yesterday <a href="https://twitter.com/avibryant">Avi</a> (who is the best) and I
looked at why it was so damn slow (~1 millisecond/record) in some more
depth. This code is open source so I can show it to you! We profiled using
VisualVM and, after doing some optimizations, found out that it was
spending all its time in <code>DenseHLL$x$6</code>. This is mystery Scala speak for
this code block from Twitter&rsquo;s Algebird library that estimates the size of a HyperLogLog:</p>

<pre><code class="language-scala">  lazy val (zeroCnt, z) = {
    var count: Int = 0
    var res: Double = 0

    // goto while loop to avoid closure
    val arr: Array[Byte] = v.array
    val arrSize: Int = arr.size
    var idx: Int = 0
    while (idx &lt; arrSize) {
      val mj = arr(idx)
      if (mj == 0) {
        count += 1
        res += 1.0
      } else {
        res += java.lang.Math.pow(2.0, -mj)
      }
      idx += 1
    }
    (count, 1.0 / res)
  }
</code></pre>

<p>from
<a href="https://github.com/twitter/algebird/blob/c84d67836396757db881/algebird-core/src/main/scala/com/twitter/algebird/HyperLogLog.scala#L436-L455">HyperLogLog.scala</a></p>

<p>This is a little inscrutable and I&rsquo;m not going to explain what this code
does, but <code>arrSize</code> in my case is 4096. So basically, we have
something like 10,000 floating point operations, and it takes about 1ms
to do. I am still new to performance optimizations, but I discussed it
with Kamal and we decided it was outrageous. Since this loop is <strong>hardly
doing anything omg</strong>, the obvious target is <code>java.lang.Math.pow(2.0,
-mj)</code>, because that looks like the hardest thing. (note: Java is pretty fast. if you are doing normal operations like adding and multiplying numbers it should go REALLY FAST. because <a href="http://jvns.ca/blog/2014/05/12/computers-are-fast/">computers are fast</a>)</p>

<p>(note: <a href="https://gist.github.com/jboner/2841832">Latency Numbers Every Programmer Should Know</a> is great and useful in
cases like this! Many CPU instructions take a nanosecond
or something. so 10K of them should be on the order of 10 microseconds
or so. Definitely not a millisecond.)</p>

<p>Kamal and I tried two things: replacing <code>Math.pow(2, -mj)</code> with <code>1.0 / (1 &lt;&lt; mj)</code>, and writing a lookup table (since <code>mj</code> is a byte and has
256 possible values, we can just calculate 2^(-mj) for every possible
value up front).</p>

<p>The final performance numbers on the benchmark we picked were:</p>

<pre><code>math.pow:         0.8ms
1.0 / (1 &lt;&lt; mj):  0.017ms (!)
the lookup table: 0.008ms (!!!)
</code></pre>

<p>So we can literally make this code <strong>100 times faster</strong> by just changing
one line. Avi simultaneously came to the same conclusions and
made this pull request <a href="https://github.com/twitter/algebird/pull/491">Speed up HLL presentation by 100x</a>. Hooray!</p>

<p>I&rsquo;m learning intuitions for when code is slower than it should be and it
is THE BEST. Being able to say &ldquo;this code should not take 10s to process
10,000 records&rdquo; is amazing. It is even more amazing when you can
actually fix it.</p>

<p><small>
If you&rsquo;re interested in the rest of my day at work for some reason, I
</small></p>

<ul>
<li><small>worked with someone on understanding which of our machine learning models are doing the most work for us</small></li>
<li><small>wrote 2 SQL queries to help someone on the Risk team find accounts with suspicious activity</small></li>
<li><small>wrangled Scala performance (this) so that we can generate training sets for our machine learning models without tearing our hair out</small></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A zine about strace]]></title>
    <link href="https://jvns.ca/blog/2015/04/14/strace-zine/"/>
    <updated>2015-04-14T22:52:23+00:00</updated>
    <id>https://jvns.ca/blog/2015/04/14/strace-zine/</id>
    <content type="html"><![CDATA[<p><strong>UPDATE</strong>: this zine and more can now be found at <a href="https://jvns.ca/zines">jvns.ca/zines</a></p>

<p>As some of you might have heard, I wrote a zine to teach people about
how to debug their programs using strace a while ago! I was originally
going to mail it out to people, but it turns out I&rsquo;m too lazy to mail
anything.</p>

<p>So instead, you can download, print, fold, and staple it yourself today!
It should work if you print it double-sided with short edge binding on
letter paper. Also if you print an initial master copy, you can take it
to a copy shop and get them to make many copies for you.</p>

<p>Give it to your friends/colleagues/students to teach them about strace!
Send me pictures! <a href="https://twitter.com/b0rk">Tell me</a> what you think! &lt;3</p>

<p><a href="http://jvns.ca/strace-zine-portrait.pdf">Here&rsquo;s the pdf. Have fun.</a> (there&rsquo;s also a <a href="http://jvns.ca/strace-zine-landscape.pdf">landscape version</a>)</p>

<p>You can also <a href="http://jvns.ca/strace-zine-unfolded.pdf">read it on your computer</a>. But printing it is better! =D</p>

<div align="center">
<a href="http://jvns.ca/strace-zine-portrait.pdf">
<img src="/images/strace_zine.png">
</a>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How gzip uses Huffman coding]]></title>
    <link href="https://jvns.ca/blog/2015/02/22/how-gzip-uses-huffman-coding/"/>
    <updated>2015-02-22T09:28:02+00:00</updated>
    <id>https://jvns.ca/blog/2015/02/22/how-gzip-uses-huffman-coding/</id>
    <content type="html"><![CDATA[<p>I wrote a blog post quite a while ago called <a href="http://jvns.ca/blog/2013/10/24/day-16-gzip-plus-poetry-equals-awesome/">gzip + poetry = awesome</a>
where I talked about how the gzip compression program uses the LZ77 algorithm
to identify repetitions in a piece of text.</p>

<p>In case you don&rsquo;t know what LZ77 is (I sure didn&rsquo;t), here&rsquo;s the video from that
post that gives you an example of gzip identifying repetitions in a poem!</p>

<iframe width="500px" height="300px" src="//www.youtube.com/embed/SWBkneyTyPU"
frameborder="0" allowfullscreen=""></iframe>

<p><br><br></p>

<p>I thought this was a great demonstration, but it&rsquo;s only half the story about
how gzip works, and it&rsquo;s taken me until now to write the rest of it down. So!
Without further ado, let&rsquo;s say we&rsquo;re compressing this text:</p>

<pre><code>a tapping, as of someone gently 
r{apping},{ rapping}
at my chamber door
</code></pre>

<p></p>

<p>It&rsquo;s identified <code>apping</code> and <code>rapping</code> as being repeated, so gzip then encodes
that as, roughly</p>

<pre><code>a tapping, as of someone gently
r{back 30 characters, copy 6},
{back 9 characters, copy 8} at my chamber door
</code></pre>

<p>Once it&rsquo;s gotten rid of the repetitions, the next step is to compress the
individual characters. That is &ndash; if we have some text like</p>

<pre><code>ab bac ead gae haf iaj kal man oap
</code></pre>

<p>there isn&rsquo;t any repetition to eliminate, but <code>a</code> is the most common letter, so
we should compress it more than the other letters <code>bcdefghijklmnop</code>.</p>

<h3 id="how-gzip-uses-huffman-coding-to-represent-individual-characters">How gzip uses Huffman coding to represent individual characters</h3>

<p>gzip compresses bytes, so to make an improvement we&rsquo;re going to want to be able
to represent some bytes using less than a byte (8 bits) of space. Our
compressed text might look something like</p>

<pre><code>0101010010101010001010010010010101001010001010100101010101
1001010101010010011111111000000110000100000101000000000000
</code></pre>

<p>Those were totally made up 0s and 1s and do not mean anything. But, reading
something like this, how can you know where the boundaries between characters
are? Does 01 represent a character? 010? 0101? 01010?</p>

<p>This is where a really smart idea called <strong>Huffman coding</strong> comes in! The idea
is that we represent our characters (like a, b, c, d, &hellip;.) with codes like</p>

<pre><code>a: 00
b: 010
c: 011
d: 1000
e: 1001
f: 1010
g: 1011
h: 1111
</code></pre>

<p>If you look at these carefully, you&rsquo;ll notice something special! It&rsquo;s that none
of these codes is a prefix of any other code. So if we write down
<code>010001001011</code> we can see that it&rsquo;s <code>010 00 1001 011</code> or <code>baec</code>! There wasn&rsquo;t
any ambiguity, because <code>0</code> and <code>01</code> and <code>0100</code>  don&rsquo;t mean anything.</p>

<p>You might ALSO notice that these are all less than 8 bits! That means we&rsquo;re
doing COMPRESSION. This Huffman table will let us compress anything that only
has <code>abcdefgh</code>s in it.</p>

<p>These Huffman tables are usually represented as <strong>trees</strong>. Here&rsquo;s the Huffman
tree for the table I wrote down above:</p>

<p><img src="/images/huffmantree.png"></p>

<p>You can see that, for instance, if you follow the path <code>011</code> then you get to <code>c</code>.</p>

<h3 id="let-s-read-some-real-huffman-tables">Let&rsquo;s read some real Huffman tables!</h3>

<p>It&rsquo;s all very well and good to have a theoretical idea of how this works, but I
like looking at Real Stuff.</p>

<p>There&rsquo;s a really great program called <code>infgen</code> that I found this morning that
helps you see the contents of a gzip file. You can get it with</p>

<pre><code>wget http://zlib.net/infgen.c.gz
gunzip infgen.c.gz
</code></pre>

<p>When we run<code>./infgen raven.txt.gz</code>, it prints out some somewhat cryptic output like</p>

<pre><code>litlen 10 6
litlen 32 5
litlen 33 9
litlen 34 10
litlen 39 8
litlen 44 6
litlen 45 9
litlen 46 9
litlen 59 9
litlen 63 10
[... lots more ...]
literal 'Once upon a midnight dreary, while I 
match 3 31
literal 'dered weak an
match 5 9
match 3 33
literal 10 'Over many
match 3 62
literal 'quaint
match 5 30
literal 'curious volume of forgotten lore,
</code></pre>

<p>This is really neat! It&rsquo;s telling us how gzip&rsquo;s chosen to compress The Raven.
We&rsquo;re going to ignore the parts that make sense (&ldquo;Once upon a midnight
dreary..&ldquo;) and just focus on the confusing <code>litlen</code> parts.</p>

<p>These <code>litlen</code> lines are weird! Thankfully I spent 5 straight days thinking
about gzip <a href="http://jvns.ca/blog/2013/10/16/day-11-how-does-gzip-work/">in October 2013</a>
so I know what they mean. <code>litlen 10 6</code> means &ldquo;The ASCII character 10 is
represented with a code of length 6&rdquo;. Which initially seems totally unhelpful!
Like, who cares if it&rsquo;s represented with a code of length 6 if I DON&rsquo;T KNOW
WHAT THAT CODE IS?!!</p>

<p>BUT! Let&rsquo;s sort these by code length first, and translate the ASCII codes to
characters.</p>

<pre><code>   ' ' 6
   'a' 6
   'e' 6
   'i' 6
   'n' 6
   'o' 6
   'r' 6
   's' 6
   't' 6
  '\n' 7
   ',' 7
   'b' 7
   'c' 7
</code></pre>

<p>For starters, these are some of the most common letters in the English
language, so it TOTALLY MAKES SENSE that these would be encoded most
efficiently. Yay!</p>

<p>The gzip specification actually specifies an algorithm for translating these
lengths into a Huffman table! We start with 000000, and then add 1 in binary
each time. If the code length ever increases, then we shift left. (so 100 -&gt;
1010). Let&rsquo;s apply that to these code lengths!</p>

<pre><code>  ' ' 000000
   'a' 000001
   'e' 000010
   'i' 000011
   'n' 000100
   'o' 000101
   'r' 000110
   's' 000111
   't' 001000
  '\n' 0010010
   ',' 0010011
   'b' 0010100
   'c' 0010101
   'd' 0010110
   'f' 0010111
   'h' 0011000
   'l' 0011001
   'm' 0011010
   'p' 0011011
   'u' 0011100
</code></pre>

<p>I found all this out by reading <a href="http://www.infinitepartitions.com/art001.html">this incredibly detailed page</a>, in case you want to know
more.</p>

<p>I wrote a script to do this, and you can try it out yourself! It&rsquo;s at
<a href="https://github.com/jvns/gzip-huffman-tree/">https://github.com/jvns/gzip-huffman-tree</a></p>

<p>I tried it out on the compressed source code <code>infgen.c.gz</code>, and you can totally
see it&rsquo;s source code and not a novel!</p>

<pre><code> ' ' 00000
 'a' 000010
 'e' 000011
 'i' 000100
 'n' 000101
 'o' 000110
 'r' 000111
 's' 001000
 '&quot;' 0010010
 '(' 0010011
 ')' 0010100
 ',' 0010101
 '-' 0010110
</code></pre>

<p>I really like going through explorations like this because they give
me a better idea of how things like Huffman codes are used in real
life! It&rsquo;s kind of my favorite when things I learned about in math
class show up in the programs I use every day. And now I feel like I
have a better idea of when it would be appropriate to use a technique
like this.</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I learned to program in 10 years]]></title>
    <link href="https://jvns.ca/blog/2015/02/17/how-i-learned-to-program-in-10-years/"/>
    <updated>2015-02-17T17:30:27+00:00</updated>
    <id>https://jvns.ca/blog/2015/02/17/how-i-learned-to-program-in-10-years/</id>
    <content type="html"><![CDATA[<p>The other day someone emailed me asking advice to learn how to program.
He said he was planning to use &ldquo;Learn Python the Hard Way&rdquo;, which I
understand is an excellent tutorial. I don&rsquo;t generally like giving
advice, because I think it&rsquo;s way too easy to generalize your own
experience into advice and do it wrong.</p>

<p>But then I found I had something to say! I thought a little bit about
this blog, and how it might look like I sprang from the womb being
excited about strace or thinking about how to build an operating system,
or whatever. But in fact I spent about 10 years learning to program
before going to Hacker School, mostly at fairly low speeds.</p>

<p>I drew a totally unscientific graph about what that felt like:</p>

<p><a href="/images/unscientific-programming-graph.png"> <img src="/images/unscientific-programming-graph.png"> </a></p>

<p></p>

<p>You should not try to conclude very much from this graph, but some
events include:</p>

<ul>
<li>I started learning to program in 2004, because my math teacher gave me
a TI-83 calculator and then I wrote BASIC programs in math class.</li>
<li>A guy I added on MSN for some reasons I don&rsquo;t totally remember told me
to install Gentoo and use this new browser Firebird and I never tried
Gentoo but I did install a few Linux distributions!</li>
<li>now I&rsquo;ve been using Linux continuously for 11 years so that was a
pretty great decision I guess.</li>
<li>My dad bought me Learning Perl and I was amazed to find out you could
write subroutines and define your own variable names because on the
TI-83 you only have about 26 variables (A-Z) and there are for loops
but no named functions</li>
<li>I went to university in 2006 and somehow was given the root password
to a lab with 4 Linux and 3 Windows computers and wrote some terrible
perl scripts to do some user management and uh yeah</li>
<li>I finish university, with degrees in math/computer science. At this
point (2011) I still basically don&rsquo;t believe I&rsquo;m any good at
programming. I do not in any way consider applying to fancy jobs at
Google or Microsoft or whatever.</li>
<li>I get a <a href="http://evolvingweb.ca/">first job</a> and a <a href="http://www.viascience.com/">second job</a> and coding 40 hours a week teaches me
a lot about the software engineering side of programming</li>
</ul>

<p>So, I went back the other day to some of the older code I&rsquo;d written,
thinking it would be terrible. Here, I put it on Github:
<a href="https://github.com/jvns/julias-first-programs/blob/master/2005/grepstuff.pl">julias-first-programs</a>.</p>

<p>Notably missing is the perl script that I wrote in 2005 to convert the
digits of pi to midi music to write to a cd to give as a gift (?!). I
couldn&rsquo;t find it.</p>

<p>And, sure, it&rsquo;s not great code, but that&rsquo;s not what was the most
surprising to me. What was the most surprising was <em>how little of it</em> I
found. It turns out that in the first years I was learning to program, I
was also in school full-time, not studying computer science, and I
didn&rsquo;t necessarily write a lot of programs!</p>

<p>Most of what I found was little scripts like
<a href="https://github.com/jvns/julias-first-programs/blob/master/2005/grepstuff.pl">grepstuff.pl</a>.
And, sure, it&rsquo;s not well-indented or anything. But the scope for most of
these was so small (I was the only person writing or running most of
them!) that it didn&rsquo;t really matter if they weren&rsquo;t well-engineered.</p>

<p>Anyway, this is mostly to say &ndash; if you&rsquo;re programming and just starting
out, and worrying that people say you can learn to program in 24 hours
or 12 weeks&hellip; whatever. It&rsquo;s taken me 11 years so far, and I&rsquo;m not done
:)</p>

<p>If you know how to program, and wrote your own version of this blog
post, I would be interested to read it!</p>

<p><small>Title shamelessly stolen from Peter Norvig&rsquo;s <a href="http://norvig.com/21-days.html">Teach Yourself Programming in Ten Years</a></small></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Diving into concurrency: trying out mutexes and atomics]]></title>
    <link href="https://jvns.ca/blog/2014/12/14/fun-with-threads/"/>
    <updated>2014-12-14T12:58:55+00:00</updated>
    <id>https://jvns.ca/blog/2014/12/14/fun-with-threads/</id>
    <content type="html"><![CDATA[<p>I hadn&rsquo;t written any threaded programs before yesterday. I knew sort of
abstractly about some concurrency concepts (mutexes! people say
compare-and-swap but I don&rsquo;t totally get it!), but actually
understanding a Thing is hard if I&rsquo;ve never done it. So yesterday I
decided to write a program with threads! In this post, we&rsquo;re going to:</p>

<ol>
<li>Write a threaded program that gets the wrong answer because of a race
condition</li>
<li>Fix that race condition in C and Rust, using 2 different approaches
(mutexes and atomics)</li>
<li>Find out why Rust is slower than C</li>
<li>Talk a little about the actual system calls and instructions that
make some of this work</li>
</ol>

<p></p>

<p>At first I was going to write a concurrent hashmap, but
<a href="https://twitter.com/kamalmarhubi">Kamal</a> wisely pointed out that I
should start with something simpler, like a counter!</p>

<p>So. We&rsquo;re going to get 20 threads to count to 20,000,000 all together.
We&rsquo;ll have a global counter variable, and increment it like this:</p>

<pre><code>counter += 1
</code></pre>

<p>That seems so safe! What can go wrong here is that if two threads try to
increment the number at the exact same time, then it&rsquo;ll only get
incremented once instead of twice. This is called a <strong>race condition</strong>.</p>

<h3 id="writing-a-race-condition">Writing a race condition</h3>

<p>Here&rsquo;s what my original C program looks like, with the bug. I wrote this
by knowing that people used a library called &ldquo;pthreads&rdquo; to do threads in
c, and googling &ldquo;pthreads example&rdquo;. I&rsquo;m not going to explain it very
much, but essentially it creates 20 threads and has them all run the
<code>AddThings</code> function which increments a global counter a million times.</p>

<p>Full version:
<a href="https://github.com/jvns/fun-with-threads/blob/master/counter_race.c">counter_race.c</a>.</p>

<pre><code class="language-c">#define NUM_THREADS     20
#define NUM_INCREMENTS  1000000

int counter;

void *AddThings(void *threadid) {
   for (int i = 0; i &lt; NUM_INCREMENTS; i++)
        counter += 1;
   pthread_exit(NULL);
}

int main (int argc, char *argv[]) {
   pthread_t threads[NUM_THREADS];
   long t;
   for(t = 0; t&lt;NUM_THREADS; t++){
      int rc = pthread_create(&amp;threads[t], NULL, AddThings, (void *)t);
      if (rc){
         printf(&quot;ERROR; return code from pthread_create() is %d\n&quot;, rc);
         exit(1);
      }
   }
   // Wait for threads to finish
   for (t = 0; t &lt; NUM_THREADS; t++)
       pthread_join(threads[t], NULL);
   printf(&quot;Final value of counter is: %d\n&quot;, counter);
   pthread_exit(NULL);
}
</code></pre>

<p>This program a) runs very fast and b) returns wildly different answers
each time. We&rsquo;re expecting 20,000,000. I ran it 10 times and got 10
different answers, between 2,838,838 and 5,695,671.</p>

<h3 id="first-try-mutexes-and-learning-that-mutexes-can-be-really-slow">First try: mutexes! (and learning that mutexes can be Really Slow)</h3>

<p>A mutex (or <strong>lock</strong>) is a way to control access to a resource so that
two threads don&rsquo;t change it in conflicting ways at the same time.</p>

<p>A typical pattern for using a lock is:</p>

<pre><code>lock.lock();
// do something with shared state, eg counter +=1 
lock.unlock();
</code></pre>

<p>Mutexes are often implemented on Linux systems with the <a href="http://man7.org/linux/man-pages/man2/futex.2.html"><code>futex</code> system
call</a>. Basically it&rsquo;s
a way of saying &ldquo;hey, kernel! This lock is closed, so I&rsquo;d like to stop
running. Can you please wake me up when it&rsquo;s available again?&ldquo;.</p>

<p>I learned during these explorations that all this making system calls
and going to sleep and waking up again is actually pretty expensive. But
let&rsquo;s do performance numbers first!</p>

<p>So the C pthread library has a mutex implementation like this. Let&rsquo;s
implement our counter with it! You can see the full implementation t
<a href="https://github.com/jvns/fun-with-threads/blob/master/counter_with_mutex.c">counter_with_mutex.c</a>.
It&rsquo;s a pretty small change: we need to add</p>

<pre><code>pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;
</code></pre>

<p>at the beginning, and replace <code>counter += 1</code> with</p>

<pre><code>pthread_mutex_lock(&amp;mutex);
counter += 1;
pthread_mutex_unlock(&amp;mutex);
</code></pre>

<p>If we run our new program, it calculates the correct answer every time!
Amazing! What does the performance of this look like? I&rsquo;m going to do
all my profiling with <code>perf stat</code> (perf is an amazing program that you
can read more about in <a href="http://jvns.ca/blog/2014/05/13/profiling-with-perf/">I can spy on my CPU cycles with perf!</a>)</p>

<pre><code>$ perf stat ./counter_with_mutex
Final value of counter is: 20000000
       3.134196432 seconds time elapse
</code></pre>

<p>Our original counter with the race condition took more like 0.08
seconds. This is a really big performance hit, even if it means that we
have a program that works instead of a program that doesn&rsquo;t!</p>

<h3 id="mutexes-in-rust-too-it-s-even-slower">Mutexes in Rust, too! (it&rsquo;s even slower!)</h3>

<p>I decided to implement the same thing in Rust because, well, Rust is
fun! You can see it at
<a href="https://github.com/jvns/fun-with-threads/blob/master/rust_counter_mutex.rs">rust_counter_mutex.rs</a>.</p>

<p>We create a mutex with</p>

<pre><code>let data = Arc::new(Mutex::new(0u));
</code></pre>

<p>and increment it with</p>

<pre><code>for _ in range(0u, NUM_INCREMENTS) {
   let mut d = data.lock();
    *d += 1;
}
</code></pre>

<p>I basically got this to work by <a href="http://doc.rust-lang.org/std/sync/struct.Mutex.html">copying the Rust mutex
documentation</a>. I&rsquo;m
pretty impressed by how much Rust&rsquo;s documentation has improved in the
last year.</p>

<p>I ran this, and I was expecting it to perform about as well as my C code.
It didn&rsquo;t.</p>

<pre><code>$ perf stat ./rust_counter_mutex
       8.842611143 seconds time elapsed
</code></pre>

<p>My first instinct was to profile it! I used Brendan Gregg&rsquo;s excellent
<a href="https://github.com/brendangregg/FlameGraph">flame graph library</a>, and ran</p>

<pre><code>$ sudo perf record ./rust_counter_mutex
$ sudo perf script | stackcollapse-perf.pl | flamegraph.pl &gt; rust_mutex_flamegraph.svg
</code></pre>

<p><a href="/images/rust_mutex_flamegraph.svg"><img src="/images/rust_mutex_flamegraph.svg"></a></p>

<p><a href="/images/c_mutex_flamegraph.svg"><img src="/images/c_mutex_flamegraph.svg"></a></p>

<p>What is even going on here?! These two graphs look exactly the same. Why
does the Rust one taking longer?</p>

<p>So, off to the races in the #rust IRC channel! Fortunately, the people
in #rust are the Nicest People. You can see them helping me out <a href="https://botbot.me/mozilla/rust/2014-12-13/?msg=27485007&amp;page=27">in the
logs</a>
=D.</p>

<p>After a while, someone named Sharp explains that Rust&rsquo;s mutexes are
implemented in a Slow Way using channels. This seems to make sense, but
then why couldn&rsquo;t I see that from the flamegraph? He explains helpfully
that channels in Rust are also implemented with the <code>futex</code> syscall, so
it&rsquo;s spending all of its time in the same syscalls, just doing it less
efficiently. COOL.</p>

<p>Sharp also suggests using an atomic instead of a mutex, so that&rsquo;s the next
step!</p>

<h3 id="making-it-fast-with-atomics-in-rust">Making it fast with atomics in Rust</h3>

<p>This one is at
<a href="https://github.com/jvns/fun-with-threads/blob/master/rust_counter_atomics.rs">rust_counter_atomics.rs</a>.
I did this without actually understanding what an atomic even is, so I&rsquo;m not
going to explain anything yet.</p>

<p>Basically we replace our mutex with a</p>

<pre><code>let counter = Arc::new(AtomicUint::new(0));
</code></pre>

<p>and our loop with</p>

<pre><code>for _ in range(0u, NUM_INCREMENTS) {
    counter.fetch_add(1, Relaxed);
}
</code></pre>

<p>I&rsquo;m not going to talk about the <code>Relaxed</code> right now (because I don&rsquo;t understand it as well as I&rsquo;d like), but basically this increments our counter in a threadsafe way (so that two threads can&rsquo;t race).</p>

<p>And it works! And it&rsquo;s fast!</p>

<pre><code>perf stat ./rust_counter_atomics
20000000
       0.556901591 seconds time elapsed
</code></pre>

<p>Here&rsquo;s the new flamegraph:</p>

<p><a href="/images/rust_atomics_flamegraph.svg"><img src="/images/rust_atomics_flamegraph.svg"></a></p>

<p>You can see from the new flamegraph that it&rsquo;s definitely not using
mutexes at all. But we still don&rsquo;t know how these atomics work, which is
troubling. Let&rsquo;s implement the same thing in C, to see if it makes it a
little clearer.</p>

<h3 id="atomics-in-c-even-faster">Atomics in C: even faster!</h3>

<p>To use atomics in our C program, I replaced</p>

<pre><code>for (int i = 0; i &lt; NUM_INCREMENTS; i++) {
    pthread_mutex_lock(&amp;mutex);
    counter += 1;
    pthread_mutex_unlock(&amp;mutex);
}
</code></pre>

<p>with something called <code>__sync_add_and_fetch</code>:</p>

<pre><code>   for (int i = 0; i &lt; NUM_INCREMENTS; i++) {
       __sync_add_and_fetch(&amp;counter, 1);
   }
</code></pre>

<p>You might have noticed that the <code>fetch_add</code> in Rust is suspiciously
similar to <code>__sync_add_and_fetch</code>. This is a special GCC <a href="https://gcc.gnu.org/onlinedocs/gcc-4.1.2/gcc/Atomic-Builtins.html">atomic builtin</a>
which generates assembly instructions to safely increment our counter.</p>

<p>That GCC documentation page is pretty readable! One interesting thing is
this:</p>

<blockquote>
<p>All of the routines are described in the Intel documentation to take
“an optional list of variables protected by the memory barrier”. It&rsquo;s
not clear what is meant by that; it could mean that only the following
variables are protected, or it could mean that these variables should
in addition be protected. At present GCC ignores this list and
protects all variables which are globally accessible. If in the future
we make some use of this list, an empty list will continue to mean all
globally accessible variables.</p>
</blockquote>

<p>It&rsquo;s sort of refreshing to hear the people who write GCC (who I think of
as MAGICAL WIZARDS WHO KNOW EVERYTHING) say that they read some Intel
documentation and it was not clear what it meant! This stuff must really
not be easy.</p>

<p>This C program is a little faster than the Rust version, clocking in at
around 0.44 seconds on my machine. I don&rsquo;t know why.</p>

<h3 id="what-actual-cpu-instructions-are-involved">What actual CPU instructions are involved?</h3>

<p>I don&rsquo;t really read assembly, so we&rsquo;ll need some help to see which are
the Magical Safe Instructions. <code>perf</code> is the best program in the
universe, and it can help us with this! <code>perf record</code> and <code>perf
annotate</code> together let us see which instructions in our program are
taking the most time.</p>

<pre><code>$ perf record ./counter_with_atomics
$ perf annotate --no-source
       │    ↓ jmp    21 
  0.03 │15:   lock   addl   $0x1,counter
 99.43 │      addl   $0x1,-0x4(%rbp)
  0.13 │21:   cmpl   $0xf423f,-0x4(%rbp)
  0.41 │    ↑ jle    15  
</code></pre>

<p>and we can try it with the Rust program, too:</p>

<pre><code>$ perf record ./rust_counter_atomics
$ perf annotate --no-source
       │       nop
  0.05 │ 50:   mov    0x20(%rbx),%rcx
  0.02 │       lock   incq 0x10(%rcx)
 99.93 │       dec    %rax
       │     ↑ jne    50  
</code></pre>

<p>So we can see that there&rsquo;s a <code>lock</code> instruction prefix that increments a
variable in each case. Googling for &ldquo;lock instruction finds us this <a href="http://x86.renejeschke.de/html/file_module_x86_id_159.html">x86 instruction set reference</a>:</p>

<blockquote>
<p>In a multiprocessor environment, the LOCK# signal insures that the
processor has exclusive use of any shared memory while the signal is
asserted.</p>
</blockquote>

<p>In both cases over 99% of the run time is spent in the instruction right
after that instruction. I&rsquo;m not totally sure why that is, but it could
be that the <code>lock</code> itself is fast, but then once it&rsquo;s done the memory it
updated needs to be synchronized and the next instruction needs to wait
for that to happen. That&rsquo;s mostly made up though. If you want to explain
it to me I would be delighted.</p>

<p>(If you&rsquo;ve heard about compare-and-swap, that&rsquo;s a similar instruction
that lets you update variables without creating races)</p>

<h3 id="we-are-now-slightly-closer-to-being-concurrency-wizards">We are now slightly closer to being concurrency wizards</h3>

<p>This was really fun! In January I was talking to a (super nice!) company
that built distributed systems about interviewing there, and they sent
me some questions to answer. One of the questions was something like
&ldquo;can you discuss the pros and cons of using a lock-free approach for
implementing a thread-safe hashmap?&rdquo;</p>

<p>My reaction at the time was WHAT ARE YOU EVEN ASKING ME HELP. But these
concurrency explorations make me feel like that question is a lot more
reasonable! Using atomic instructions in this case was way faster than
using a mutex, and I feel like I have a slightly better sense of how all
this works now.</p>

<p>Also when I see a process waiting in a <code>futex(...</code> system call when I
strace it, I understand what&rsquo;s going on a little better! This is
wonderful.</p>

<p>Thanks are due to <a href="https://twitter.com/kamalmarhubi">Kamal</a> for having
lots of wonderful suggestions, and the people of the ever-amazing #rust
IRC channel. You can see all the code for this post at
<a href="https://github.com/jvns/fun-with-threads/">https://github.com/jvns/fun-with-threads/</a>.</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How does SQLite work? Part 1: pages!]]></title>
    <link href="https://jvns.ca/blog/2014/09/27/how-does-sqlite-work-part-1-pages/"/>
    <updated>2014-09-27T23:53:50+00:00</updated>
    <id>https://jvns.ca/blog/2014/09/27/how-does-sqlite-work-part-1-pages/</id>
    <content type="html"><![CDATA[<p>This evening the fantastic <a href="https://twitter.com/kamalmarhubi">Kamal</a>
and I sat down to learn a little more about databases than we did
before.</p>

<p>I wanted to hack on <a href="https://www.sqlite.org/">SQLite</a>, because I&rsquo;ve
used it before, it requires no configuration or separate server
process, I&rsquo;d been told that its source code is well-written and
approachable, and all the data is stored in one file. Perfect!</p>

<p>
To start out, I created a new database like this:</p>

<pre><code class="language-sql">drop table if exists fun;
create table fun (
    id int PRIMARY KEY,
    word string
);
</code></pre>

<p>Just a primary key and a string! What could be simpler? I then wrote a
little Python script to put the contents of <code>/usr/share/dict/words</code> in
the database:</p>

<pre><code class="language-python">import sqlite3
c = sqlite3.connect(&quot;./fun.sqlite&quot;)
with open('/usr/share/dict/words') as f:
    for i, word in enumerate(f):
        word = word.strip()
        word = unicode(word, 'latin1')
        c.execute(&quot;INSERT INTO fun VALUES (?, ?);&quot;, (i, word))
c.commit()
c.close()
</code></pre>

<p>Great! Now we have a 4MB database called <code>fun.sqlite</code> for
experimentation. My favorite first thing to do with binary files is to
<code>cat</code> them. That worked pretty well, but Kamal pointed out that of
course <code>hexdump</code> is a better way to look at binary files. The output
of <code>hexdump -C fun.sqlite</code> looks something like this:</p>

<pre><code>|.............{.n|
|.a.R.D.4.%......|
|................|
|...y.n._.N.&gt;.,.$|
|................|
|..............F.|
|..EAcevedo.E...D|
|Accra's.D...CAcc|
|ra.C..#BAccentur|
|e's.B...AAccentu|
|re.A..!@Acapulco|
|'s.@...?Acapulco|
|.?...&gt;Acadia's.&gt;|
|...=Aradia.=...&lt;|
|Ac's.&lt;...;Ac.;..|
|%:Abyssinian's.:|
|..!9Abyssinian.9|
|..#8Abyssinia's.|
|8...7Abyssinia.7|
</code></pre>

<p>I&rsquo;ve pasted the first few thousand lines of the hexdump in
<a href="https://gist.github.com/jvns/d21876d1388343c3a4a3">this gist</a>, so you
can look more closely. You&rsquo;ll see that the file is alternately split
into words and gibberish &ndash; there will be a sequence of mostly words,
and then unreadable nonsense.</p>

<p>Of course there&rsquo;s a rhyme to this reason! The wonderfully written
<a href="https://www.sqlite.org/fileformat2.html">File Format for SQLite Databases</a>
tells us that a SQLite database is split into <strong>pages</strong>, and that
bytes 16 and 17 of our file are the <strong>page size</strong>.</p>

<p>My <code>fun.sqlite</code> starts like this:</p>

<pre><code>00000000  53 51 4c 69 74 65 20 66  6f 72 6d 61 74 20 33 00  |SQLite format 3.|
00000010  04 00 01 01 00 40 20 20  00 00 00 27 00 00 0c be  |.....@  ...'....|
          ^^ ^^
        page size :)
</code></pre>

<p>so our page size is <code>0x0400</code> bytes, or 1024 bytes, or 1k. So this
database is split into a bunch of 1k chunks called pages.</p>

<p>There&rsquo;s an index on the <code>id</code> column of our <code>fun</code> table, which lets us
run queries like <code>select * from fun where id = 100</code> quickly. To be a
bit more precise: to find row 100, we don&rsquo;t need to read every page,
we can just read a few pages. I&rsquo;ve always understood indexes in a
pretty vague way &ndash; I know that they&rsquo;re &ldquo;some kind of tree&rdquo;, which
lets you access data in O(log n), and in particular that databases use
something called a <strong>btree</strong>. I still do not really know what a btree
is. Let&rsquo;s see if we can do any better!</p>

<p>Here&rsquo;s where it starts to get really fun! I downloaded the sqlite
source code, and Kamal and I figured out how to get it to compile.
(using nix, which is a totally other story)</p>

<p>Then I put in a print statement so that it would tell me every time it
accesses a page. There&rsquo;s about 140,000 lines of SQLite source code,
which is a bit intimidating!</p>

<p>It&rsquo;s also incredibly well commented, though, and includes adorable
notes like this:</p>

<pre><code class="language-c">/************** End of btree.c ***********************************************/
/************** Begin file backup.c ******************************************/
/*
** 2009 January 28
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:                                                                                                                                                   
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
** This file contains the implementation of the sqlite3_backup_XXX()
** API functions and the related features.
</code></pre>

<p>My next goal was to get SQLite to tell me how it was traversing the
pages. Some careful grepping of the 140,000 lines led us to this
function <code>btreePageFromDbPage</code>. All page reads need to go through this
function, so we can just add some logging to it :)</p>

<pre><code class="language-c">/*
** Convert a DbPage obtained from the pager into a MemPage used by
** the btree layer.
*/
static MemPage *btreePageFromDbPage(DbPage *pDbPage, Pgno pgno, BtShared *pBt){
  MemPage *pPage = (MemPage*)sqlite3PagerGetExtra(pDbPage);
  pPage-&gt;aData = sqlite3PagerGetData(pDbPage);
  pPage-&gt;pDbPage = pDbPage;
  pPage-&gt;pBt = pBt;
  pPage-&gt;pgno = pgno;
  printf(&quot;Read a btree page, page number %d\n&quot;, pgno); // added by me!
  pPage-&gt;hdrOffset = pPage-&gt;pgno==1 ? 100 : 0;
  return pPage;
}
</code></pre>

<p>Now it&rsquo;ll notify us every time it reads a page! NEAT! Let&rsquo;s experiment
a little bit.</p>

<pre><code>sqlite&gt; select * from fun where id = 1;
Read a btree page, page number 1
Read a btree page, page number 5
Read a btree page, page number 828
Read a btree page, page number 10
Read a btree page, page number 2
Read a btree page, page number 76
Read a btree page, page number 6
1|A's

sqlite&gt; select * from fun where id = 20;
Read a btree page, page number 1
Read a btree page, page number 5
Read a btree page, page number 828
Read a btree page, page number 10
Read a btree page, page number 2
Read a btree page, page number 76
Read a btree page, page number 6
20|Aaliyah
</code></pre>

<p>Those two rows (1 and 20) are in the same page, so it traverses the
same path to get to both of them!</p>

<pre><code>sqlite&gt; select * from fun where id = 200;
Read a btree page, page number 1
Read a btree page, page number 5
Read a btree page, page number 828
Read a btree page, page number 11
Read a btree page, page number 2
Read a btree page, page number 76
Read a btree page, page number 2818
200|Aggie
</code></pre>

<p>Apparently <code>200</code> is pretty close in the tree, but it needs to go to
page <code>2818</code> instead at the end. And <code>80000</code> is much further away:</p>

<pre><code>sqlite&gt; select * from fun where id = 80000;
Read a btree page, page number 1
Read a btree page, page number 5
Read a btree page, page number 1198
Read a btree page, page number 992
Read a btree page, page number 2
Read a btree page, page number 1813
Read a btree page, page number 449
80000|scarfs
</code></pre>

<p>If we go back and inspect the file, we can see that pages 1, 5, 1198,
992, 2, and 1813 are <em>interior nodes</em> &ndash; they have no data in them,
just pointers to other pages. Pages 6, 2818, and 449 are <em>leaf nodes</em>,
and they&rsquo;re where the data is.</p>

<p>I&rsquo;m still not super clear on how exactly the interior pages are
structured and how the pointers to their child pages work. It&rsquo;s time
to sleep now, but perhaps that will happen another day!</p>

<p>Modifying open source programs to print out debug information to
understand their internals better: SO FUN.</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What happens if you write a TCP stack in Python?]]></title>
    <link href="https://jvns.ca/blog/2014/08/12/what-happens-if-you-write-a-tcp-stack-in-python/"/>
    <updated>2014-08-12T08:52:30+00:00</updated>
    <id>https://jvns.ca/blog/2014/08/12/what-happens-if-you-write-a-tcp-stack-in-python/</id>
    <content type="html"><![CDATA[<p>During Hacker School, I wanted to understand networking better, and I
decided to write a miniature TCP stack as part of that. I was much
more comfortable with Python than C and I&rsquo;d recently discovered the
<a href="http://www.secdev.org/projects/scapy/">scapy</a> networking library
which made sending packets
<a href="http://jvns.ca/blog/2013/10/31/day-20-scapy-and-traceroute/">really easy</a>.</p>

<p>So I started writing <a href="https://github.com/jvns/teeceepee">teeceepee</a>!</p>

<p>The basic idea was</p>

<ol>
<li>open a raw network socket that lets me send TCP packets</li>
<li>send a HTTP request to <code>GET</code> google.com</li>
<li>get and parse a response</li>
<li>celebrate!</li>
</ol>

<p>I didn&rsquo;t care much about proper error handling or anything; I just
wanted to get one webpage and declare victory :)</p>

<p></p>

<h2 id="step-1-the-tcp-handshake">Step 1: the TCP handshake</h2>

<p>I started out by doing a TCP handshake with Google! (this won&rsquo;t
necessarily run correctly, but illustrates the principles). I&rsquo;ve
commented each line.</p>

<p>The way a TCP handshake works is:</p>

<ul>
<li>me: SYN</li>
<li>google: SYNACK!</li>
<li>me: ACK!!!</li>
</ul>

<p>Pretty simple, right? Let&rsquo;s put it in code.</p>

<pre><code class="language-python"># My local network IP
src_ip = &quot;192.168.0.11&quot;
# Google's IP
dest_ip = &quot;96.127.250.29&quot;
# IP header: this is coming from me, and going to Google
ip_header = IP(dst=dest_ip, src=src_ip)
# Specify a large random port number for myself (59333),
# and port 80 for Google The &quot;S&quot; flag means this is
# a SYN packet
syn = TCP(dport=80, sport=59333, 
          ack=0, flags=&quot;S&quot;)
# Send the SYN packet to Google
# scapy uses '/' to combine packets with headers
response = srp(ip_header / syn)
# Add the sequence number 
ack = TCP(dport=80, sport=self.src_port, 
          ack=response.seq, flags=&quot;A&quot;) 
# Reply with the ACK
srp(ip_header / ack)
</code></pre>

<h3 id="wait-sequence-numbers">Wait, sequence numbers?</h3>

<p>What&rsquo;s all this about sequence numbers? The whole point of TCP is to
make sure you can resend packets if some of them go missing. Sequence
numbers are a way to check if you&rsquo;ve missed packets. So let&rsquo;s say that
Google sends me 4 packets, size 110, 120, 200, and 500 bytes. Let&rsquo;s
pretend the initial sequence number is 0. Then those packets will have
sequence numbers 0, 110, 230, and 430.</p>

<p>So if I suddenly got a 100-byte packet with a sequence number of 2000,
that would mean I missed a packet! The next sequence number should be
930!</p>

<p>How can Google know that I missed the packet? Every time I receive a
packet from Google, I need to send an ACK (&ldquo;I got the packet with
sequence number 230, thanks!&ldquo;). If the Google server notices I haven&rsquo;t
ACKed a packet, then it can resend it!</p>

<p>The TCP protocol is extremely complicated and has all kinds of rate
limiting logic in it, but we&rsquo;re not going to talk about any of that.
This is all you&rsquo;ll need to know about TCP for this post!</p>

<p>For a more in-depth explanation, including how SYN
packets affect sequence numbers, I found
<a href="http://packetlife.net/blog/2010/jun/7/understanding-tcp-sequence-acknowledgment-numbers/">Understanding TCP sequence numbers</a>
very clear.</p>

<h2 id="step-2-oh-no-i-already-have-a-tcp-stack">Step 2: OH NO I already have a TCP stack</h2>

<p>So I ran the code above, and I had a problem. IT DIDN&rsquo;T WORK.</p>

<p>But in a kind of funny way! I just didn&rsquo;t get any responses. I looked
in Wireshark (a wonderful tool for spying on your packets) and it
looked like this:</p>

<pre><code>me: SYN
google: SYNACK
me: RST
</code></pre>

<p>Wait, what? I never sent a <code>RST</code> packet?! <code>RST</code> means STOP THE
CONNECTION IT&rsquo;S OVER. That is not in my code at all!</p>

<p>This is when I remembered that I <em>already</em> have a TCP stack on my
computer, in my kernel. So what was actually happening was:</p>

<pre><code>my Python program: SYN
google: SYNACK
my kernel: lol wtf I never asked for this! RST!
my Python program: ... :(
</code></pre>

<p>So how do we bypass the kernel? I talked to the delightful
<a href="https://github.com/jtakkala">Jari Takkala</a> about this, and he
suggested using
<a href="http://jvns.ca/blog/2013/10/29/day-18-in-ur-connection/">ARP spoofing</a>
to pretend I had a different IP address (like <code>192.168.0.129</code>).</p>

<p>The new exchange was like this:</p>

<pre><code>me: hey router! send packets for 192.168.0.129 to my MAC address
router: (does it silently)
my Python program: SYN (from 192.168.0.129)
google: SYNACK
kernel: this isn't my IP address! &lt;ignore&gt;
my Python program: ACK YAY
</code></pre>

<p>And it worked! Okay, awesome, we can now send packets AND GET
RESPONSES without my kernel interfering! AWESOME.</p>

<h2 id="step-3-get-a-webpage">Step 3: get a webpage!</h2>

<p>There is an intervening step here where I fix tons of irritating bugs
preventing Google from sending me the HTML for <a href="http://google.com">http://google.com</a>. I
eventually fixed all of these, and emerge victorious!</p>

<p>I needed to</p>

<ul>
<li>put together a packet containing a HTTP GET request</li>
<li>make sure I can listen for <em>lots</em> of packets in response, not just
one</li>
<li>spend a lot of time fixing bugs with sequence numbers</li>
<li>try to close the connection properly</li>
</ul>

<h2 id="step-4-realize-python-is-slow">Step 4: realize Python is slow</h2>

<p>Once I had everything working, I used Wireshark again to look at what
packets were being sent back and forth. It looked something like this:</p>

<pre><code>me/google: &lt;tcp handshake&gt;
me: GET google.com
google: 100 packets
me: 3 ACKs
google: &lt;starts resending packets&gt;
me: a few more ACKs
google: &lt;reset connection&gt;
</code></pre>

<p>The sequences of packets from Google and ACKs from me looked something
like: P P P A P P P P P A P P A P P P P A. Google was sending me
packets <em>way</em> faster than my program could keep up and send ACKs.
Then, hilariously, Google&rsquo;s server would assume that there were
network problems causing me to not ACK its packets.</p>

<p>And it would eventually reset the connection because it would decide
there were connection problems.</p>

<p>But the connection was fine! My program was totally responding! It was
just that my Python program was way too slow to respond to packets in
the millisecond times it expected.</p>

<p>(edit: this diagnosis seems to be incorrect :) you can
<a href="https://news.ycombinator.com/item?id=8167546">read some discussion</a>
about what may be actually going on here)</p>

<h2 id="life-lessons">life lessons</h2>

<p>If you&rsquo;re actually writing a production TCP stack, don&rsquo;t use Python.
(surprise!) Also, the TCP spec is really complicated, but you can get
servers to reply to you even if your implementation is extremely sketchy.</p>

<p>I was really happy that it actually worked, though! The ARP spoofing
was extremely finicky, but I wrote a version of <code>curl</code> using it which
worked about 25% of the time. You can see all the absurd code at
<a href="https://github.com/jvns/teeceepee/">https://github.com/jvns/teeceepee/</a>.</p>

<p>I think this was actually way more fun and instructive than trying to
write a TCP stack in an appropriate language like C :)</p>]]></content>
  </entry>
  
</feed>